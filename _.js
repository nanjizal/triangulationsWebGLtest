// Generated by Haxe 3.4.1
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var Type = function() { };
Type.__name__ = true;
Type.enumIndex = function(e) {
	return e[1];
};
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var htmlHelper_tools_CSSEnterFrame = function() {
	this.s = js_Browser.get_document().createElement("style");
	this.s.innerHTML = "@keyframes spin { from { transform:rotate( 0deg ); } to { transform:rotate( 360deg ); } }";
	js_Browser.get_document().getElementsByTagName("head")[0].appendChild(this.s);
	this.s.animation = "spin 1s linear infinite";
	this.loop(60);
};
htmlHelper_tools_CSSEnterFrame.__name__ = true;
htmlHelper_tools_CSSEnterFrame.prototype = {
	destroy: function() {
		js_Browser.get_document().getElementsByTagName("head")[0].removeChild(this.s);
		js_Browser.get_window().requestAnimationFrame(null);
		this.s.innerHTML = "";
		this.s.animation = "";
		this.s = null;
	}
	,loop: function(tim) {
		js_Browser.get_window().requestAnimationFrame($bind(this,this.loop));
		if(this.onFrame != null) {
			this.onFrame();
		}
		return true;
	}
	,__class__: htmlHelper_tools_CSSEnterFrame
};
var htmlHelper_webgl_WebGLSetup = function(width_,height_,autoChild) {
	if(autoChild == null) {
		autoChild = true;
	}
	this.colors = [];
	this.indices = [];
	this.vertices = [];
	this.matrix32Array = new Float32Array(htmlHelper_webgl_WebGLSetup.ident());
	this.modelViewProjection = new khaMath_Matrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.bgAlpha = 1.;
	this.bgBlue = 1.;
	this.bgGreen = 1.;
	this.bgRed = 1.;
	this.width = width_;
	this.height = height_;
	this.canvas = js_Browser.get_document().createElement("canvas");
	this.canvas.width = this.width;
	this.canvas.height = this.height;
	var dom = this.canvas;
	var style = dom.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	if(autoChild) {
		js_Browser.get_document().body.appendChild(this.canvas);
	}
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
};
htmlHelper_webgl_WebGLSetup.__name__ = true;
htmlHelper_webgl_WebGLSetup.createVertexShader = function(gl,str) {
	var vertexShader = gl.createShader(35633);
	gl.shaderSource(vertexShader,str);
	gl.compileShader(vertexShader);
	return vertexShader;
};
htmlHelper_webgl_WebGLSetup.createFragmentShader = function(gl,str) {
	var fragmentShader = gl.createShader(35632);
	gl.shaderSource(fragmentShader,str);
	gl.compileShader(fragmentShader);
	return fragmentShader;
};
htmlHelper_webgl_WebGLSetup.createShaderProgram = function(gl,vertex,fragment) {
	var program = gl.createProgram();
	gl.attachShader(program,vertex);
	gl.attachShader(program,fragment);
	gl.linkProgram(program);
	gl.useProgram(program);
	return program;
};
htmlHelper_webgl_WebGLSetup.uploadTriangleDataToBuffers = function(gl,program,vertices,indices) {
	var vertexBuffer = gl.createBuffer();
	gl.bindBuffer(34962,vertexBuffer);
	gl.bufferData(34962,new Float32Array(vertices),35044);
	var position = gl.getAttribLocation(program,"pos");
	gl.vertexAttribPointer(position,3,5126,false,0,0);
	gl.enableVertexAttribArray(position);
	gl.bindBuffer(34962,null);
};
htmlHelper_webgl_WebGLSetup.uploadDataToBuffers = function(gl,program,vertices,colors,indices) {
	htmlHelper_webgl_WebGLSetup.uploadTriangleDataToBuffers(gl,program,vertices,indices);
	htmlHelper_webgl_WebGLSetup.uploadSimpleColorToBuffers(gl,program,colors);
};
htmlHelper_webgl_WebGLSetup.uploadFloatToBuffers = function(gl,program,name,att,arr) {
	var floatBuffer = gl.createBuffer();
	gl.bindBuffer(34962,floatBuffer);
	gl.bufferData(34962,new Float32Array(arr),35044);
	var flo = gl.getAttribLocation(program,name);
	gl.vertexAttribPointer(flo,att,5126,false,0,0);
	gl.enableVertexAttribArray(flo);
	gl.bindBuffer(34962,null);
};
htmlHelper_webgl_WebGLSetup.uploadSimpleColorToBuffers = function(gl,program,colors) {
	var colorBuffer = gl.createBuffer();
	gl.bindBuffer(34962,colorBuffer);
	gl.bufferData(34962,new Float32Array(colors),35044);
	var col = gl.getAttribLocation(program,"color");
	gl.vertexAttribPointer(col,4,5126,false,0,0);
	gl.enableVertexAttribArray(col);
	gl.bindBuffer(34962,null);
};
htmlHelper_webgl_WebGLSetup.toRGB = function($int) {
	return { r : ($int >> 16 & 255) / 255, g : ($int >> 8 & 255) / 255, b : ($int & 255) / 255};
};
htmlHelper_webgl_WebGLSetup.transferM4_arr32 = function(arr,m) {
	arr.set([m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33]);
};
htmlHelper_webgl_WebGLSetup.ident = function() {
	return [1.0,0.0,0.0,0.0,0.0,1.1,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
};
htmlHelper_webgl_WebGLSetup.prototype = {
	setupProgram: function(vertexString,fragmentString) {
		var vertex = htmlHelper_webgl_WebGLSetup.createVertexShader(this.gl,vertexString);
		var fragment = htmlHelper_webgl_WebGLSetup.createFragmentShader(this.gl,fragmentString);
		this.program = htmlHelper_webgl_WebGLSetup.createShaderProgram(this.gl,vertex,fragment);
		return this.program;
	}
	,clearVerticesAndColors: function() {
		this.vertices = [];
		this.indices = [];
		this.colors = [];
	}
	,setVerticesAndColors: function(vertices,triangleColors) {
		var rgb;
		var colorAlpha = 1.0;
		var _g1 = 0;
		var _g = Std["int"](vertices.length / 3);
		while(_g1 < _g) {
			var i = _g1++;
			rgb = htmlHelper_webgl_WebGLSetup.toRGB(triangleColors[i]);
			var _g2 = 0;
			while(_g2 < 3) {
				var j = _g2++;
				this.colors.push(rgb.r);
				this.colors.push(rgb.g);
				this.colors.push(rgb.b);
				this.colors.push(colorAlpha);
			}
			this.indices.push(i);
		}
		htmlHelper_webgl_WebGLSetup.uploadDataToBuffers(this.gl,this.program,vertices,this.colors,this.indices);
	}
	,render: function() {
		this.gl.clearColor(this.bgRed,this.bgGreen,this.bgBlue,this.bgAlpha);
		this.gl.enable(2884);
		this.gl.cullFace(1029);
		this.gl.clear(16384);
		this.gl.viewport(0,0,this.canvas.width,this.canvas.height);
		var modelViewProjectionID = this.gl.getUniformLocation(this.program,"modelViewProjection");
		htmlHelper_webgl_WebGLSetup.transferM4_arr32(this.matrix32Array,this.modelViewProjection);
		this.gl.uniformMatrix4fv(modelViewProjectionID,false,this.matrix32Array);
		this.gl.drawArrays(4,0,this.indices.length);
	}
	,__class__: htmlHelper_webgl_WebGLSetup
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.get_window = function() {
	return window;
};
js_Browser.get_document = function() {
	return window.document;
};
var js_Lib = function() { };
js_Lib.__name__ = true;
js_Lib.get_undefined = function() {
	return undefined;
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var _g = 0;
	var _g1 = ["webgl","experimental-webgl"];
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		var ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
	}
	return null;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var justTriangles_Bezier = function() { };
justTriangles_Bezier.__name__ = true;
justTriangles_Bezier.quadratic = function(t,arr) {
	return { x : justTriangles_Bezier._quadratic(t,arr[0].x,arr[1].x,arr[2].x), y : justTriangles_Bezier._quadratic(t,arr[0].y,arr[1].y,arr[2].y)};
};
justTriangles_Bezier._quadratic = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justTriangles_Bezier.cubic = function(t,arr) {
	return { x : justTriangles_Bezier._cubic(t,arr[0].x,arr[1].x,arr[2].x,arr[3].x), y : justTriangles_Bezier._cubic(t,arr[0].y,arr[1].y,arr[2].y,arr[3].y)};
};
justTriangles_Bezier._cubic = function(t,startPoint,controlPoint1,controlPoint2,endPoint) {
	var u = 1 - t;
	return Math.pow(u,3) * startPoint + 3 * Math.pow(u,2) * t * controlPoint1 + 3 * u * Math.pow(t,2) * controlPoint2 + Math.pow(t,3) * endPoint;
};
var justTriangles_Draw = function() {
	this.thickRatio = 1024;
};
justTriangles_Draw.__name__ = true;
justTriangles_Draw.set_thick = function(val) {
	if(val < 0) {
		val = 0.00001;
	}
	justTriangles_Draw.thickness = val / 1024;
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.get_thick = function() {
	return justTriangles_Draw.thickness;
};
justTriangles_Draw.packManFill = function(id,dx,dy,radius,start,dA) {
	var tmp = justTriangles_ShapePoints.arc(dx,dy,radius,start,dA,60);
	justTriangles_Draw.outerPoly(id,false,{ x : dx, y : dy},tmp);
};
justTriangles_Draw.roundedRectangleOutline = function(id,dx,dy,hi,wid,radiusSmall,radius) {
	var dia = radius * 2;
	var circleSides2 = 120;
	var lb = justTriangles_ShapePoints.arc(dx,dy + hi,radiusSmall,-Math.PI - Math.PI / 2,Math.PI / 2,circleSides2);
	var rb = justTriangles_ShapePoints.arc(dx + wid,dy + hi,radiusSmall,0,Math.PI / 2,circleSides2);
	var rt = justTriangles_ShapePoints.arc(dx + wid,dy,radiusSmall,-Math.PI / 2,Math.PI / 2,circleSides2);
	var lt = justTriangles_ShapePoints.arc(dx,dy,radiusSmall,-Math.PI,Math.PI / 2,circleSides2);
	justTriangles_Draw.isolatedLine(id,{ x : dx, y : dy - radius},{ x : dx + wid, y : dy - radius},dia,false);
	justTriangles_Draw.isolatedLine(id,{ x : dx + radius + wid, y : dy},{ x : dx + radius + wid, y : dy + hi},dia,false);
	justTriangles_Draw.isolatedLine(id,{ x : dx, y : dy + radius + hi},{ x : dx + wid, y : dy + radius + hi},dia,false);
	justTriangles_Draw.isolatedLine(id,{ x : dx - radius, y : dy},{ x : dx - radius, y : dy + hi},dia,false);
	justTriangles_Draw.outerPoly(id,true,{ x : dx, y : dy + hi},lb);
	justTriangles_Draw.outerPoly(id,true,{ x : dx + wid, y : dy + hi},rb);
	justTriangles_Draw.outerPoly(id,true,{ x : dx + wid, y : dy},rt);
	justTriangles_Draw.outerPoly(id,true,{ x : dx, y : dy},lt);
};
justTriangles_Draw.beginLine = function(id,p0_,p1_,thick) {
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw.setThickness(thick);
	draw.calculateP3p4();
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw.calculateP3p4();
	var oldThickness = justTriangles_Draw.thickness;
	justTriangles_Draw.thickness = thick / 2;
	var temp = draw.angle1;
	justTriangles_Draw.outerPoly(id,true,p0_,justTriangles_ShapePoints.arc(p0_.x,p0_.y,thick / 4,temp,Math.PI,24));
	justTriangles_Draw.thickness = oldThickness;
	var q3 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q3,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q3,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.endLine = function(id,p0_,p1_,thick) {
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw.setThickness(thick);
	draw.calculateP3p4();
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw.calculateP3p4();
	var oldThickness = justTriangles_Draw.thickness;
	justTriangles_Draw.thickness = thick / 2;
	var temp = draw.angle1 + Math.PI;
	justTriangles_Draw.outerPoly(id,true,p1_,justTriangles_ShapePoints.arc(p1_.x,p1_.y,thick / 4,temp,Math.PI,24));
	justTriangles_Draw.thickness = oldThickness;
	var q3 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q3,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q3,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.isolatedLine = function(id,p0_,p1_,thick,curveEnds) {
	if(curveEnds == null) {
		curveEnds = false;
	}
	var draw = new justTriangles_Draw();
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw.setThickness(thick);
	draw.calculateP3p4();
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw.calculateP3p4();
	if(curveEnds) {
		var oldThickness = justTriangles_Draw.thickness;
		justTriangles_Draw.thickness = thick / 2;
		var temp = draw.angle1;
		justTriangles_Draw.outerPoly(id,true,p0_,justTriangles_ShapePoints.arc(p0_.x,p0_.y,thick / 4,temp,Math.PI,24));
		temp += Math.PI;
		justTriangles_Draw.outerPoly(id,true,p1_,justTriangles_ShapePoints.arc(p1_.x,p1_.y,thick / 4,temp,Math.PI,24));
		justTriangles_Draw.thickness = oldThickness;
	}
	var q3 = { x : draw.p3.x, y : draw.p3.y};
	var q4 = { x : draw.p4.x, y : draw.p4.y};
	justTriangles_Draw.drawTri(id,true,q0,q3,q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,q0,q3,q4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.triangleJoin = function(id,draw,p0_,p1_,thick,curveEnds) {
	if(curveEnds == null) {
		curveEnds = false;
	}
	var oldAngle = draw.p3 != null ? draw.angle1 : null;
	draw.p0 = p1_;
	draw.p1 = p0_;
	draw.halfA = Math.PI / 2;
	draw.setThickness(thick);
	draw.calculateP3p4();
	var q0 = { x : draw.p3.x, y : draw.p3.y};
	var q1 = { x : draw.p4.x, y : draw.p4.y};
	draw.p0 = p0_;
	draw.p1 = p1_;
	draw.calculateP3p4();
	if(draw.p3old2 != null) {
		var clockWise = justTriangles_Draw.dist(draw.p3old2,p1_) > justTriangles_Draw.dist(draw.p4old2,p1_);
		if(curveEnds) {
			if(oldAngle != null) {
				var dif = Math.abs(draw.angle1 - oldAngle);
				if(dif > 0.1) {
					var oldThickness = justTriangles_Draw.thickness;
					justTriangles_Draw.thickness = thick / 2;
					if(clockWise) {
						justTriangles_Draw.outerPoly(id,true,p0_,justTriangles_ShapePoints.arc_internal(p0_.x,p0_.y,thick / 4,draw.angle1,dif,240));
					} else {
						justTriangles_Draw.outerPoly(id,true,p0_,justTriangles_ShapePoints.arc_internal(p0_.x,p0_.y,thick / 4,draw.angle2,-dif,240));
					}
					justTriangles_Draw.thickness = oldThickness;
				}
			}
		}
		if(clockWise) {
			justTriangles_Draw.drawTri(id,true,draw.p3old2,q1,p0_,justTriangles_Draw.colorId);
		} else {
			justTriangles_Draw.drawTri(id,true,draw.p4old2,q0,p0_,justTriangles_Draw.colorId);
		}
	}
	justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4old,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,true,draw.p3old,draw.p3,draw.p4,justTriangles_Draw.colorId);
	return draw;
};
justTriangles_Draw.quadCurves = function(id,p,thick) {
	var curvePoints;
	var curveLen;
	var len = p.length - 1;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		if((i - 1) % 2 == 0) {
			curvePoints = justTriangles_ShapePoints.quadCurve(p[i],p[i + 1],p[i + 2]);
			curveLen = curvePoints.length;
			justTriangles_Draw.beginLine(id,curvePoints[0],curvePoints[1],thick);
			justTriangles_Draw.endLine(id,curvePoints[curveLen - 2],curvePoints[curveLen - 1],thick);
			justTriangles_Draw.triangles(id,true,curvePoints);
		}
	}
};
justTriangles_Draw.cubicCurves = function(id,p,thick) {
	var curvePoints;
	var curveLen;
	var len = p.length - 1;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		if((i - 2) % 3 == 0) {
			curvePoints = justTriangles_ShapePoints.cubicCurve(p[i],p[i + 1],p[i + 2],p[i + 3]);
			curveLen = curvePoints.length;
			justTriangles_Draw.beginLine(id,curvePoints[0],curvePoints[1],thick);
			justTriangles_Draw.endLine(id,curvePoints[curveLen - 3],curvePoints[curveLen - 2],thick);
			justTriangles_Draw.triangles(id,true,curvePoints);
		}
	}
};
justTriangles_Draw.dist = function(p0,p1) {
	var dx = p0.x - p1.x;
	var dy = p0.y - p1.y;
	return dx * dx + dy * dy;
};
justTriangles_Draw.poly = function(id,outline,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = justTriangles_Draw.firstQuad(id,p,0);
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		justTriangles_Draw.otherQuad(id,outline,p,draw,i);
	}
};
justTriangles_Draw.outerPoly = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = justTriangles_Draw.firstQuad(id,p,0);
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		justTriangles_Draw.outerFilledTriangles(id,outline,centre,p,draw,i);
	}
};
justTriangles_Draw.outerPolyExtra = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = justTriangles_Draw.firstQuad(id,p,0);
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		justTriangles_Draw.outerFilledTrianglesExtra(id,outline,centre,p,draw,i);
	}
};
justTriangles_Draw.innerPoly = function(id,outline,centre,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var draw = justTriangles_Draw.firstQuad(id,p,0);
	var _g1 = 1;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		justTriangles_Draw.innerFilledTriangles(id,outline,centre,p,draw,i);
	}
};
justTriangles_Draw.triangles = function(id,outline,p) {
	justTriangles_Draw.q0 = p[0];
	justTriangles_Draw.q1 = p[0];
	var _g1 = 0;
	var _g = p.length - 2;
	while(_g1 < _g) {
		var i = _g1++;
		justTriangles_Draw.quad(id,outline,p,i);
	}
};
justTriangles_Draw.firstQuad = function(id,p,i) {
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[i],p[i + 1],p[i + 2],justTriangles_Draw.thickness);
	var q3 = draw.p3;
	var q4 = draw.p4;
	justTriangles_Draw.q0 = q3;
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.otherQuad = function(id,outline,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	var q4 = draw.p4;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.outerFilledTriangles = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	return draw;
};
justTriangles_Draw.outerFilledTrianglesExtra = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q3 = draw.p3;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q0 = q3;
	return draw;
};
justTriangles_Draw.innerFilledTriangles = function(id,outline,centre,p,draw,i) {
	draw.rebuildAsPoly(p[i + 2]);
	var q4 = draw.p4;
	justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q4,centre,justTriangles_Draw.colorId);
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.quad = function(id,outline,p,i) {
	var draw = new justTriangles_Draw();
	draw.create2Lines(p[i],p[i + 1],p[i + 2],justTriangles_Draw.thickness);
	var q3 = draw.p3;
	var q4 = draw.p4;
	if(i != 0) {
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q0,q3,justTriangles_Draw.q1,justTriangles_Draw.colorId);
		justTriangles_Draw.drawTri(id,outline,justTriangles_Draw.q1,q3,q4,justTriangles_Draw.colorId);
	}
	justTriangles_Draw.q0 = q3;
	justTriangles_Draw.q1 = q4;
	return draw;
};
justTriangles_Draw.generateMidPoints = function(arr) {
	var out = [];
	var a;
	var b;
	var len = arr.length - 2;
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		a = arr[i];
		b = arr[i + 1];
		out.push({ x : (b.x + a.x) / 2, y : (b.y + a.y) / 2});
		out.push({ x : b.x, y : b.y});
	}
	a = arr[0];
	out.unshift({ x : a.x, y : a.y});
	out.unshift({ x : a.x, y : a.y});
	b = arr[arr.length - 1];
	out.push({ x : b.x, y : b.y});
	out.push({ x : b.x, y : b.y});
	out.push({ x : b.x, y : b.y});
	return out;
};
justTriangles_Draw.prototype = {
	create2Lines: function(p0_,p1_,p2_,thick) {
		this.p0 = p0_;
		this.p1 = p1_;
		this.p2 = p2_;
		this.b2 = justTriangles_Draw.dist(this.p0,this.p1);
		this.c2 = justTriangles_Draw.dist(this.p1,this.p2);
		this.a2 = justTriangles_Draw.dist(this.p0,this.p2);
		this.b = Math.sqrt(this.b2);
		this.c = Math.sqrt(this.c2);
		this.a = Math.sqrt(this.a2);
		this.cosA = (this.b2 + this.c2 - this.a2) / (2 * this.b * this.c);
		if(this.cosA > 1) {
			this.cosA = 1;
		} else if(this.cosA < -1) {
			this.cosA = -1;
		}
		this.angleA = Math.acos(this.cosA);
		this.halfA = this.angleA / 2;
		this.setThickness(thick);
		this.calculateP3p4();
	}
	,setThickness: function(val) {
		this._thick = val;
		this.beta = Math.PI / 2 - this.halfA;
		this.r = this._thick / 2 * Math.cos(this.beta);
	}
	,calculateP3p4: function() {
		this._theta = this.theta(this.p0,this.p1);
		if(this._theta > 0) {
			if(this.halfA < 0) {
				this.angle2 = this._theta + this.halfA + Math.PI / 2;
				this.angle1 = this._theta - this.halfA;
			} else {
				this.angle1 = this._theta + this.halfA - Math.PI;
				this.angle2 = this._theta + this.halfA;
			}
		} else if(this.halfA > 0) {
			this.angle1 = this._theta + this.halfA - Math.PI;
			this.angle2 = this._theta + this.halfA;
		} else {
			this.angle2 = this._theta + this.halfA + Math.PI / 2;
			this.angle1 = this._theta - this.halfA;
		}
		if(this.p3old != null) {
			this.p3old2 = this.p3old;
		}
		if(this.p4old != null) {
			this.p4old2 = this.p4old;
		}
		if(this.p3 != null) {
			this.p3old = this.p3;
		}
		if(this.p4 != null) {
			this.p4old = this.p4;
		}
		this.p3 = { x : this.p1.x + this.r * Math.cos(this.angle1), y : this.p1.y + this.r * Math.sin(this.angle1)};
		this.p4 = { x : this.p1.x + this.r * Math.cos(this.angle2), y : this.p1.y + this.r * Math.sin(this.angle2)};
	}
	,rebuildAsPoly: function(p2_) {
		this.p0 = this.p1;
		this.p1 = this.p2;
		this.p2 = p2_;
		this.calculateP3p4();
	}
	,theta: function(p0,p1) {
		var dx = p0.x - p1.x;
		var dy = p0.y - p1.y;
		return Math.atan2(dy,dx);
	}
	,__class__: justTriangles_Draw
};
var justTriangles_IPathContext = function() { };
justTriangles_IPathContext.__name__ = true;
justTriangles_IPathContext.prototype = {
	__class__: justTriangles_IPathContext
};
var justTriangles_LineType = { __ename__ : true, __constructs__ : ["TriangleJoinCurve","TriangleJoinStraight","Poly","Curves","Round","Isolated","Quad"] };
justTriangles_LineType.TriangleJoinCurve = ["TriangleJoinCurve",0];
justTriangles_LineType.TriangleJoinCurve.__enum__ = justTriangles_LineType;
justTriangles_LineType.TriangleJoinStraight = ["TriangleJoinStraight",1];
justTriangles_LineType.TriangleJoinStraight.__enum__ = justTriangles_LineType;
justTriangles_LineType.Poly = ["Poly",2];
justTriangles_LineType.Poly.__enum__ = justTriangles_LineType;
justTriangles_LineType.Curves = ["Curves",3];
justTriangles_LineType.Curves.__enum__ = justTriangles_LineType;
justTriangles_LineType.Round = ["Round",4];
justTriangles_LineType.Round.__enum__ = justTriangles_LineType;
justTriangles_LineType.Isolated = ["Isolated",5];
justTriangles_LineType.Isolated.__enum__ = justTriangles_LineType;
justTriangles_LineType.Quad = ["Quad",6];
justTriangles_LineType.Quad.__enum__ = justTriangles_LineType;
var justTriangles_PathContext = function(id_,width_,tx_,ty_) {
	if(ty_ == null) {
		ty_ = 0;
	}
	if(tx_ == null) {
		tx_ = 0;
	}
	this.lineType = justTriangles_LineType.TriangleJoinCurve;
	this.dirty = true;
	this.fill = false;
	this.id = id_;
	this.dw = width_ / 2;
	this.s = 1 / width_;
	this.tx = tx_;
	this.ty = ty_;
	this.minX = 1;
	this.maxX = -1;
	this.minY = 1;
	this.maxY = -1;
	this.lineColors = [];
	this.fillColors = [];
	this.thicks = [];
	this.lineColor = justTriangles_Draw.colorId;
	this.fillColor = justTriangles_Draw.colorId;
	this.thick = justTriangles_Draw.get_thick();
	this.ppp = [];
	this.moveTo(this.dw,this.dw);
};
justTriangles_PathContext.__name__ = true;
justTriangles_PathContext.__interfaces__ = [justTriangles_IPathContext];
justTriangles_PathContext.prototype = {
	setColor: function(lineColor_,fillColor_) {
		if(fillColor_ == null) {
			fillColor_ = -1;
		}
		if(fillColor_ != -1) {
			this.fillColor = fillColor_;
		}
		this.lineColor = lineColor_;
	}
	,setThickness: function(thick_) {
		this.thick = thick_;
		return this.thick;
	}
	,pt: function(x,y) {
		var x0 = this.s * (x - this.dw + this.tx);
		var y0 = this.s * (y - this.dw + this.ty);
		if(x0 < this.minX) {
			this.minX = x0;
		}
		if(x0 < this.minY) {
			this.minY = y0;
		}
		if(x0 > this.maxX) {
			this.maxX = x0;
		}
		if(y0 > this.maxY) {
			this.maxY = y0;
		}
		return { x : x0, y : y0};
	}
	,withinBounds: function(x,y) {
		if(x > this.minX && x < this.maxX && y > this.minY) {
			return y < this.maxY;
		} else {
			return false;
		}
	}
	,moveTo: function(x,y) {
		this.dirty = true;
		this.p0 = this.pt(x,y);
		if(this.pp != null) {
			if(this.pp.length == 1) {
				this.ppp.pop();
				this.lineColors.pop();
				this.fillColors.pop();
				this.thicks.pop();
			}
		}
		this.pp = [];
		var pl = this.ppp.length;
		this.lineColors[pl] = this.lineColor;
		this.fillColors[pl] = this.fillColor;
		this.thicks[pl] = this.thick;
		this.pp.push(this.p0);
		this.ppp.push(this.pp);
	}
	,moveToPoint: function(p0) {
		this.dirty = true;
		if(this.pp != null) {
			if(this.pp.length == 1) {
				this.ppp.pop();
				this.lineColors.pop();
				this.fillColors.pop();
				this.thicks.pop();
			}
		}
		this.pp = [];
		var pl = this.ppp.length;
		this.lineColors[this.ppp.length] = this.lineColor;
		this.fillColors[this.ppp.length] = this.fillColor;
		this.thicks[pl] = this.thick;
		this.pp.push(p0);
		this.ppp.push(this.pp);
	}
	,lineTo: function(x,y) {
		var p1 = this.pt(x,y);
		this.pp.push(p1);
		this.p0 = p1;
	}
	,quadTo: function(x1,y1,x2,y2) {
		var p1 = this.pt(x1,y1);
		var p2 = this.pt(x2,y2);
		var pMore = justTriangles_ShapePoints.quadCurve(this.p0,p1,p2);
		var plen = this.pp.length;
		var _g1 = 1;
		var _g = pMore.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.pp[plen++] = pMore[i];
		}
		this.p0 = p2;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		var p1 = this.pt(x1,y1);
		var p2 = this.pt(x2,y2);
		var p3 = this.pt(x3,y3);
		var pMore = justTriangles_ShapePoints.cubicCurve(this.p0,p1,p2,p3);
		var plen = this.pp.length;
		var _g1 = 1;
		var _g = pMore.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.pp[plen++] = pMore[i];
		}
		this.p0 = p3;
	}
	,rectangle: function(x,y,width,height) {
		var p1 = this.pt(x,y);
		var pMore = justTriangles_ShapePoints.box(p1.x,p1.y,width * this.s,height * this.s);
		this.moveToPoint(pMore[0]);
		var _g = 0;
		while(_g < pMore.length) {
			var p = pMore[_g];
			++_g;
			this.pp.push(p);
		}
	}
	,arc_move: function(x,y,radius,start,dA,direction,sides) {
		if(direction == null) {
			direction = true;
		}
		if(sides == null) {
			sides = justTriangles_PathContext.circleSides;
		}
		var p1 = this.pt(x,y);
		if(direction == false) {
			dA = -dA;
		}
		var pMore = justTriangles_ShapePoints.arcPoints(p1,radius * this.s,start,dA,sides);
		this.moveToPoint(pMore[0]);
		var _g = 0;
		while(_g < pMore.length) {
			var p = pMore[_g];
			++_g;
			this.pp.push(p);
		}
	}
	,arc: function(x,y,radius,start,dA,direction,sides) {
		if(direction == null) {
			direction = true;
		}
		if(sides == null) {
			sides = justTriangles_PathContext.circleSides;
		}
		var p1 = this.pt(x,y);
		if(direction == false) {
			dA = -dA;
		}
		var pMore = justTriangles_ShapePoints.arcPoints(p1,radius * this.s,start,dA,sides);
		var _g = 0;
		while(_g < pMore.length) {
			var p = pMore[_g];
			++_g;
			this.pp.push(p);
		}
	}
	,roundedRectangle: function(dx,dy,width,height,radius) {
		var pi = Math.PI;
		var pi_2 = Math.PI / 2;
		var p_arc1x = dx + radius;
		var p_arc1y = dy + radius;
		var p_arc2x = dx + width - radius;
		var p_arc2y = dy + radius;
		var p_arc3x = dx + width - radius;
		var p_arc3y = dy + height - radius;
		var p_arc4x = dx + radius;
		var p_arc4y = dy + height - radius;
		var p1x = dx + radius;
		var p1y = dy;
		var p2x = dx + width - radius;
		var p2y = dy;
		var p3x = dx + width;
		var p3y = dy + radius;
		var p4x = dx + width;
		var p4y = dy + height - radius;
		var p5x = dx + width - radius;
		var p5y = dy + height;
		var p6x = dx + radius;
		var p6y = dy + height;
		var p7x = dx;
		var p7y = dy + height - radius;
		var p8x = dx;
		var p8y = dy + radius;
		this.moveTo(p8x,p8y);
		this.arc_move(p_arc1x,p_arc1y,radius,pi,pi_2,true,60);
		this.arc(p_arc2x,p_arc2y,radius,-pi_2,pi_2,true,60);
		this.arc(p_arc3x,p_arc3y,radius,0,pi_2,true,60);
		this.arc(p_arc4x,p_arc4y,radius,pi_2,pi_2,true,60);
		this.lineTo(p8x,p8y);
	}
	,regularPoly: function(sides,x,y,radius,rotation) {
		if(rotation == null) {
			rotation = 0;
		}
		var p1 = this.pt(x,y);
		var pMore = justTriangles_ShapePoints.polyPoints(p1,radius * this.s,sides,rotation);
		this.moveToPoint(pMore[0]);
		var _g = 0;
		while(_g < pMore.length) {
			var p = pMore[_g];
			++_g;
			this.pp.push(p);
		}
	}
	,fillTriangles: function() {
		var p;
		var l = this.ppp_.length;
		var j = 0;
		var _g = 0;
		var _g1 = this.ppp_;
		while(_g < _g1.length) {
			var pp0 = _g1[_g];
			++_g;
			var poly = [];
			var _g3 = 0;
			var _g2 = pp0.length;
			while(_g3 < _g2) {
				var i = _g3++;
				p = pp0[i];
				poly.push(p.x);
				poly.push(p.y);
			}
			justTriangles_Draw.colorId = this.fillColors[j];
			this.polyKFill(poly);
			++j;
		}
	}
	,polyKFill: function(poly) {
		var tgs = justTriangles_PolyK.triangulate(poly);
		var triples = justTriangles__$PolyK_ArrayTriple_$Impl_$._new(tgs);
		var a;
		var b;
		var c;
		var i;
		var _g = 0;
		while(_g < Std["int"](triples.length / 3)) {
			var tri_c;
			var tri_b;
			var tri_a;
			var i1 = Std["int"](_g * 3);
			tri_a = triples[i1];
			tri_b = triples[i1 + 1];
			tri_c = triples[i1 + 2];
			++_g;
			i = Std["int"](tri_a * 2);
			a = { x : poly[i], y : poly[i + 1]};
			i = Std["int"](tri_b * 2);
			b = { x : poly[i], y : poly[i + 1]};
			i = Std["int"](tri_c * 2);
			c = { x : poly[i], y : poly[i + 1]};
			var tgs1 = justTriangles_PolyK.triangulate(poly);
			var triples1 = justTriangles__$PolyK_ArrayTriple_$Impl_$._new(tgs1);
			var a1;
			var b1;
			var c1;
			var i2;
			var _g1 = 0;
			while(_g1 < Std["int"](triples1.length / 3)) {
				var tri_c1;
				var tri_b1;
				var tri_a1;
				var i3 = Std["int"](_g1 * 3);
				tri_a1 = triples1[i3];
				tri_b1 = triples1[i3 + 1];
				tri_c1 = triples1[i3 + 2];
				++_g1;
				i2 = Std["int"](tri_a1 * 2);
				a1 = { x : poly[i2], y : poly[i2 + 1]};
				i2 = Std["int"](tri_b1 * 2);
				b1 = { x : poly[i2], y : poly[i2 + 1]};
				i2 = Std["int"](tri_c1 * 2);
				c1 = { x : poly[i2], y : poly[i2 + 1]};
				justTriangles_Draw.drawTri(this.id,false,a1,b1,c1,justTriangles_Draw.colorId);
			}
		}
	}
	,render: function(thick_,outline) {
		if(outline == null) {
			outline = true;
		}
		if(this.dirty) {
			this.reverseEntries();
		}
		if(this.fill) {
			this.fillTriangles();
		}
		var j = 0;
		var l = this.ppp_.length;
		var _g = 0;
		var _g1 = this.ppp_;
		while(_g < _g1.length) {
			var pp0 = _g1[_g];
			++_g;
			var _g2 = this.lineType;
			switch(Type.enumIndex(_g2)) {
			case 0:
				var draw = new justTriangles_Draw();
				justTriangles_Draw.colorId = this.lineColors[j];
				justTriangles_Draw.set_thick(this.thicks[j]);
				var _g3 = 0;
				var _g21 = pp0.length;
				while(_g3 < _g21) {
					var i = _g3++;
					if(i % 1 == 0 && i < pp0.length - 1) {
						justTriangles_Draw.triangleJoin(this.id,draw,pp0[i],pp0[i + 1],this.thick / 800,true);
					}
				}
				break;
			case 1:
				var draw1 = new justTriangles_Draw();
				justTriangles_Draw.colorId = this.lineColors[j];
				justTriangles_Draw.set_thick(this.thicks[j]);
				var _g31 = 0;
				var _g22 = pp0.length;
				while(_g31 < _g22) {
					var i1 = _g31++;
					if(i1 % 1 == 0 && i1 < pp0.length - 1) {
						justTriangles_Draw.triangleJoin(this.id,draw1,pp0[i1],pp0[i1 + 1],this.thick / 800,false);
					}
				}
				break;
			case 2:
				justTriangles_Draw.colorId = this.lineColors[j];
				justTriangles_Draw.poly(this.id,outline,pp0);
				break;
			case 3:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g32 = 0;
				var _g23 = pp0.length;
				while(_g32 < _g23) {
					var i2 = _g32++;
					if(i2 % 1 == 0 && i2 < pp0.length - 2) {
						justTriangles_Draw.quad(this.id,outline,pp0,i2);
					}
				}
				break;
			case 4:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g33 = 0;
				var _g24 = pp0.length;
				while(_g33 < _g24) {
					var i3 = _g33++;
					if(i3 % 1 == 0 && i3 < pp0.length - 2) {
						justTriangles_Draw.isolatedLine(this.id,pp0[i3],pp0[i3 + 1],this.thick / 800,true);
					}
				}
				break;
			case 5:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g34 = 0;
				var _g25 = pp0.length;
				while(_g34 < _g25) {
					var i4 = _g34++;
					if(i4 % 1 == 0 && i4 < pp0.length - 2) {
						justTriangles_Draw.isolatedLine(this.id,pp0[i4],pp0[i4 + 1],this.thick / 800,false);
					}
				}
				break;
			case 6:
				justTriangles_Draw.colorId = this.lineColors[j];
				var _g35 = 0;
				var _g26 = pp0.length;
				while(_g35 < _g26) {
					var i5 = _g35++;
					if(i5 % 1 == 0 && i5 < pp0.length - 2) {
						justTriangles_Draw.quad(this.id,outline,pp0,i5);
					}
				}
				break;
			}
			++j;
		}
	}
	,reverseEntries: function() {
		var p;
		if(this.ppp_ == null) {
			this.ppp_ = [];
		}
		var plen = this.ppp.length;
		var plen_ = this.ppp_.length;
		var pp0 = this.ppp[0];
		var _g1 = plen_;
		var _g = plen;
		while(_g1 < _g) {
			var i = _g1++;
			pp0 = this.ppp[i];
			p = pp0.slice();
			p.reverse();
			this.ppp_[i] = p;
		}
		this.dirty = false;
	}
	,clear: function() {
		this.lineColors = [];
		this.fillColors = [];
		this.thicks = [];
		this.ppp = [];
		this.minX = 1;
		this.maxX = -1;
		this.minY = 1;
		this.maxY = -1;
		this.dirty = true;
		this.ppp_ = null;
		this.ppp = null;
		this.pp = null;
		this.p0 = null;
	}
	,__class__: justTriangles_PathContext
};
var justTriangles__$PolyK_ArrayPairs_$Impl_$ = {};
justTriangles__$PolyK_ArrayPairs_$Impl_$.__name__ = true;
justTriangles__$PolyK_ArrayPairs_$Impl_$._new = function(arr) {
	var this1 = arr;
	return this1;
};
justTriangles__$PolyK_ArrayPairs_$Impl_$.get_length = function(this1) {
	return Std["int"](this1.length / 2);
};
justTriangles__$PolyK_ArrayPairs_$Impl_$.access = function(this1,key) {
	var i = Std["int"](key * 2);
	return { x : this1[i], y : this1[i + 1]};
};
justTriangles__$PolyK_ArrayPairs_$Impl_$.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = justTriangles__$PolyK_ArrayPairs_$Impl_$._new(this1);
	while(_g < Std["int"](_g1.length / 2)) {
		var i_y;
		var i_x;
		var i = Std["int"](_g * 2);
		i_x = _g1[i];
		i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	this1 = arr;
	return arr;
};
var justTriangles__$PolyK_ArrayTriple_$Impl_$ = {};
justTriangles__$PolyK_ArrayTriple_$Impl_$.__name__ = true;
justTriangles__$PolyK_ArrayTriple_$Impl_$._new = function(arr) {
	var this1 = arr;
	return this1;
};
justTriangles__$PolyK_ArrayTriple_$Impl_$.get_length = function(this1) {
	return Std["int"](this1.length / 3);
};
justTriangles__$PolyK_ArrayTriple_$Impl_$.access = function(this1,key) {
	var i = Std["int"](key * 3);
	return { a : this1[i], b : this1[i + 1], c : this1[i + 2]};
};
justTriangles__$PolyK_ArrayTriple_$Impl_$.reverse = function(this1) {
	var arr = [];
	var _g = 0;
	var _g1 = justTriangles__$PolyK_ArrayTriple_$Impl_$._new(this1);
	while(_g < Std["int"](_g1.length / 3)) {
		var i_c;
		var i_b;
		var i_a;
		var i = Std["int"](_g * 3);
		i_a = _g1[i];
		i_b = _g1[i + 1];
		i_c = _g1[i + 2];
		++_g;
		arr.unshift(i_c);
		arr.unshift(i_b);
		arr.unshift(i_a);
	}
	this1 = arr;
	return arr;
};
var justTriangles_PolyK = function() {
};
justTriangles_PolyK.__name__ = true;
justTriangles_PolyK.isSimple = function(p) {
	var n = p.length >> 1;
	if(n < 4) {
		return true;
	}
	var a1 = { x : 0., y : 0., flag : false};
	var a2 = { x : 0., y : 0., flag : false};
	var b1 = { x : 0., y : 0., flag : false};
	var b2 = { x : 0., y : 0., flag : false};
	var c_x = 0.;
	var c_y = 0.;
	var c_flag = false;
	var ind;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		ind = Std["int"](2 * i);
		a1.x = p[ind];
		a1.y = p[ind + 1];
		if(i == n - 1) {
			a2.x = p[0];
			a2.y = p[1];
		} else {
			a2.x = p[ind + 2];
			a2.y = p[ind + 3];
		}
		var _g3 = 0;
		var _g2 = n;
		while(_g3 < _g2) {
			var j = _g3++;
			if(Math.abs(i - j) < 2) {
				continue;
			}
			if(j == n - 1 && i == 0) {
				continue;
			}
			if(i == n - 1 && j == 0) {
				continue;
			}
			ind = 2 * j;
			b1.x = p[ind];
			b1.y = p[ind + 1];
			if(j == n - 1) {
				b2.x = p[0];
				b2.y = p[1];
			} else {
				b2.x = p[ind + 2];
				b2.y = p[ind + 3];
			}
			var c = justTriangles_PolyK.getLineIntersection(a1,a2,b1,b2);
			if(c != null) {
				return false;
			}
		}
	}
	return true;
};
justTriangles_PolyK.isConvex = function(p) {
	if(p.length < 6) {
		return true;
	}
	var l = p.length - 4;
	var l2 = Std["int"](l / 2);
	var i;
	var _g1 = 0;
	var _g = l2;
	while(_g1 < _g) {
		var k = _g1++;
		i = k * 2;
		if(!justTriangles_PolyK.convex(p[i],p[i + 1],p[i + 2],p[i + 3],p[i + 4],p[i + 5])) {
			return false;
		}
	}
	if(!justTriangles_PolyK.convex(p[l],p[l + 1],p[l + 2],p[l + 3],p[0],p[1])) {
		return false;
	}
	if(!justTriangles_PolyK.convex(p[l + 2],p[l + 3],p[0],p[1],p[2],p[3])) {
		return false;
	}
	return true;
};
justTriangles_PolyK.getArea = function(p) {
	if(p.length < 6) {
		return 0;
	}
	var l = p.length - 2;
	var sum = 0.;
	var l2 = Std["int"](l / 2);
	var i;
	var _g1 = 0;
	var _g = l2;
	while(_g1 < _g) {
		var k = _g1++;
		i = k * 2;
		sum += (p[i + 2] - p[i]) * (p[i + 1] + p[i + 3]);
	}
	sum += (p[0] - p[l]) * (p[l + 1] + p[1]);
	return -sum * 0.5;
};
justTriangles_PolyK.getAABB = function(p) {
	var minx = Infinity;
	var miny = Infinity;
	var maxx = -Infinity;
	var maxy = -Infinity;
	var _g = 0;
	var _g1 = justTriangles__$PolyK_ArrayPairs_$Impl_$._new(p);
	while(_g < Std["int"](_g1.length / 2)) {
		var i_y;
		var i_x;
		var i = Std["int"](_g * 2);
		i_x = _g1[i];
		i_y = _g1[i + 1];
		++_g;
		minx = Math.min(minx,i_x);
		maxx = Math.max(maxx,i_x);
		miny = Math.min(miny,i_y);
		maxy = Math.max(maxy,i_y);
	}
	return { x : minx, y : miny, width : maxx - minx, height : maxy - miny};
};
justTriangles_PolyK.reverse = function(p) {
	var ap = justTriangles__$PolyK_ArrayPairs_$Impl_$._new(p);
	var arr = [];
	var _g = 0;
	var _g1 = justTriangles__$PolyK_ArrayPairs_$Impl_$._new(ap);
	while(_g < Std["int"](_g1.length / 2)) {
		var i_y;
		var i_x;
		var i = Std["int"](_g * 2);
		i_x = _g1[i];
		i_y = _g1[i + 1];
		++_g;
		arr.unshift(i_y);
		arr.unshift(i_x);
	}
	ap = arr;
	return arr;
};
justTriangles_PolyK.triangulate = function(p) {
	var n = p.length >> 1;
	if(n < 3) {
		return [];
	}
	var tgs = [];
	var avl = [];
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		avl.push(i);
	}
	var i1 = 0;
	var al = n;
	var i0;
	var i11;
	var i2;
	var vi;
	var ax;
	var ay;
	var bx;
	var by;
	var cx;
	var cy;
	var earFound;
	while(al > 3) {
		i0 = avl[i1 % al];
		i11 = avl[(i1 + 1) % al];
		i2 = avl[(i1 + 2) % al];
		ax = p[2 * i0];
		ay = p[2 * i0 + 1];
		bx = p[2 * i11];
		by = p[2 * i11 + 1];
		cx = p[2 * i2];
		cy = p[2 * i2 + 1];
		earFound = false;
		if(justTriangles_PolyK.convex(ax,ay,bx,by,cx,cy)) {
			earFound = true;
			var _g11 = 0;
			var _g2 = al;
			while(_g11 < _g2) {
				var j = _g11++;
				var vi1 = avl[j];
				if(vi1 == i0 || vi1 == i11 || vi1 == i2) {
					continue;
				}
				if(justTriangles_PolyK.pointInTriangle(p[2 * vi1],p[2 * vi1 + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i11);
			tgs.push(i2);
			avl.splice((i1 + 1) % al,1);
			--al;
			i1 = 0;
		} else if(i1++ > 3 * al) {
			break;
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
justTriangles_PolyK.containsPoint = function(p,px,py) {
	var n = p.length >> 1;
	var ax;
	var ay = p[2 * n - 3] - py;
	var bx = p[2 * n - 2] - px;
	var by = p[2 * n - 1] - py;
	var twoi;
	var lup = by > ay;
	var lx;
	var _g1 = 0;
	var _g = n;
	while(_g1 < _g) {
		var i = _g1++;
		ax = bx;
		ay = by;
		twoi = 2 * i;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay == by) {
			continue;
		}
		lup = by > ay;
	}
	var depth = 0;
	var _g11 = 0;
	var _g2 = n;
	while(_g11 < _g2) {
		var i1 = _g11++;
		ax = bx;
		ay = by;
		twoi = 2 * i1;
		bx = p[twoi] - px;
		by = p[twoi + 1] - py;
		if(ay < 0 && by < 0) {
			continue;
		}
		if(ay > 0 && by > 0) {
			continue;
		}
		if(ax < 0 && bx < 0) {
			continue;
		}
		if(ay == by && Math.min(ax,bx) <= 0) {
			return true;
		}
		if(ay == by) {
			continue;
		}
		lx = ax + (bx - ax) * -ay / (by - ay);
		if(lx == 0) {
			return true;
		}
		if(lx > 0) {
			++depth;
		}
		if(ay == 0 && lup && by > ay) {
			--depth;
		}
		if(ay == 0 && !lup && by < ay) {
			--depth;
		}
		lup = by > ay;
	}
	return (depth & 1) == 1;
};
justTriangles_PolyK.slice = function(p,ax,ay,bx,by) {
	if(justTriangles_PolyK.containsPoint(p,ax,ay) || justTriangles_PolyK.containsPoint(p,bx,by)) {
		return [p.slice(0)];
	}
	var a = { x : ax, y : ay, flag : false};
	var b = { x : ax, y : ay, flag : false};
	var iscs = [];
	var ps = [];
	var _g = 0;
	var _g1 = justTriangles__$PolyK_ArrayPairs_$Impl_$._new(p);
	while(_g < Std["int"](_g1.length / 2)) {
		var i_y;
		var i_x;
		var i = Std["int"](_g * 2);
		i_x = _g1[i];
		i_y = _g1[i + 1];
		++_g;
		ps.push({ x : i_x, y : i_y, flag : false});
	}
	var l = ps.length;
	var isc;
	var skip = false;
	var _g11 = 0;
	var _g2 = l;
	while(_g11 < _g2) {
		var i1 = _g11++;
		if(skip) {
			skip = false;
			continue;
		}
		isc = justTriangles_PolyK.getLineIntersection(a,b,ps[i1],ps[(i1 + 1) % ps.length]);
		var fisc = iscs[0];
		var lisc = iscs[iscs.length - 1];
		if(isc != null && (fisc == null || justTriangles_PolyK.dist(isc,fisc) > 0.0000000001) && (lisc == null || justTriangles_PolyK.dist(isc,lisc) > 0.0000000001)) {
			isc.flag = true;
			iscs.push(isc);
			ps.splice(i1 + 1,0);
			ps.splice(i1 + 1,0,isc);
			skip = true;
		}
	}
	if(iscs.length < 2) {
		return [p.slice(0)];
	}
	var comp = function(u,v) {
		var val = justTriangles_PolyK.dist(a,u) - justTriangles_PolyK.dist(a,v);
		if(val > 0) {
			return 1;
		}
		if(val < 0) {
			return -1;
		}
		return 0;
	};
	iscs.sort(comp);
	var pgs = [];
	var dir = 0;
	while(iscs.length > 0) {
		var n = ps.length;
		var i0 = iscs[0];
		var i11 = iscs[1];
		var ind0 = ps.indexOf(i0);
		var ind1 = ps.indexOf(i11);
		var solved = false;
		if(justTriangles_PolyK.firstWithFlag(ps,ind0) == ind1) {
			solved = true;
		} else {
			i0 = iscs[1];
			i11 = iscs[0];
			ind0 = ps.indexOf(i0);
			ind1 = ps.indexOf(i11);
			if(justTriangles_PolyK.firstWithFlag(ps,ind0) == ind1) {
				solved = true;
			}
		}
		if(solved) {
			--dir;
			var pgn = justTriangles_PolyK.getPoints(ps,ind0,ind1);
			pgs.push(pgn);
			ps = justTriangles_PolyK.getPoints(ps,ind1,ind0);
			i0.flag = i11.flag = false;
			iscs.splice(0,2);
			if(iscs.length == 0) {
				pgs.push(ps);
			}
		} else {
			++dir;
			iscs.reverse();
		}
		if(dir > 1) {
			break;
		}
	}
	var result = [];
	var l1 = pgs.length;
	var l2;
	var _g12 = 0;
	var _g3 = l1;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var pg = pgs[i2];
		var npg = [];
		l2 = pg.length;
		var _g31 = 0;
		var _g21 = l2;
		while(_g31 < _g21) {
			var j = _g31++;
			npg.push(pg[j].x);
			npg.push(pg[j].y);
		}
		result.push(npg);
	}
	return result;
};
justTriangles_PolyK.raycast = function(p,x,y,dx,dy,isc) {
	var l = p.length - 2;
	var tp = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tp.push({ x : 0., y : 0., flag : false});
	}
	var a1 = tp[0];
	var a2 = tp[1];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	a2.x = x + dx;
	a2.y = y + dy;
	if(isc == null) {
		isc = { dist : 0, edge : 0, norm : { x : 0, y : 0}, refl : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = Std["int"](l / 2);
	var i1;
	var _g1 = 0;
	var _g2 = l2;
	while(_g1 < _g2) {
		var k = _g1++;
		i1 = k * 2;
		b1.x = p[i1];
		b1.y = p[i1 + 1];
		b2.x = p[i1 + 2];
		b2.y = p[i1 + 3];
		var nisc = justTriangles_PolyK.rayLineIntersection(a1,a2,b1,b2,c);
		if(nisc != null) {
			justTriangles_PolyK.updateISC(dx,dy,a1,b1,b2,c,i1 / 2,isc);
		}
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	var nisc1 = justTriangles_PolyK.rayLineIntersection(a1,a2,b1,b2,c);
	if(nisc1 != null) {
		justTriangles_PolyK.updateISC(dx,dy,a1,b1,b2,c,p.length / 2 - 1,isc);
	}
	if(isc.dist != Infinity) {
		return isc;
	} else {
		return null;
	}
};
justTriangles_PolyK.closestEdge = function(p,x,y,isc) {
	var l = p.length - 2;
	var tp = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tp.push({ x : 0., y : 0., flag : false});
	}
	var a1 = tp[0];
	var b1 = tp[2];
	var b2 = tp[3];
	var c = tp[4];
	a1.x = x;
	a1.y = y;
	if(isc == null) {
		isc = { dist : 0, edge : 0, point : { x : 0, y : 0}, norm : { x : 0, y : 0}};
	}
	isc.dist = Infinity;
	var l2 = Std["int"](l / 2);
	var i1;
	var _g1 = 0;
	var _g2 = l2;
	while(_g1 < _g2) {
		var k = _g1++;
		i1 = k * 2;
		b1.x = p[i1];
		b1.y = p[i1 + 1];
		b2.x = p[i1 + 2];
		b2.y = p[i1 + 3];
		justTriangles_PolyK.pointLineDist(a1,b1,b2,i1 >> 1,isc);
	}
	b1.x = b2.x;
	b1.y = b2.y;
	b2.x = p[0];
	b2.y = p[1];
	justTriangles_PolyK.pointLineDist(a1,b1,b2,l >> 1,isc);
	var idst = 1 / isc.dist;
	isc.norm.x = (x - isc.point.x) * idst;
	isc.norm.y = (y - isc.point.y) * idst;
	return isc;
};
justTriangles_PolyK.pointLineDist = function(p,a,b,edge,isc) {
	var x = p.x;
	var y = p.y;
	var x1 = a.x;
	var y1 = a.y;
	var x2 = b.x;
	var y2 = b.y;
	var A = x - x1;
	var B = y - y1;
	var C = x2 - x1;
	var D = y2 - y1;
	var dot = A * C + B * D;
	var len_sq = C * C + D * D;
	var param = dot / len_sq;
	var xx;
	var yy;
	if(param < 0 || x1 == x2 && y1 == y2) {
		xx = x1;
		yy = y1;
	} else if(param > 1) {
		xx = x2;
		yy = y2;
	} else {
		xx = x1 + param * C;
		yy = y1 + param * D;
	}
	var dx = x - xx;
	var dy = y - yy;
	var dst = Math.sqrt(dx * dx + dy * dy);
	if(dst < isc.dist) {
		isc.dist = dst;
		isc.edge = edge;
		isc.point.x = xx;
		isc.point.y = yy;
	}
};
justTriangles_PolyK.updateISC = function(dx,dy,a1,b1,b2,c,edge,isc) {
	var nrl = justTriangles_PolyK.dist(a1,c);
	if(nrl < isc.dist) {
		var ibl = 1 / justTriangles_PolyK.dist(b1,b2);
		var nx = -(b2.y - b1.y) * ibl;
		var ny = (b2.x - b1.x) * ibl;
		var ddot = 2 * (dx * nx + dy * ny);
		isc.dist = nrl;
		isc.norm.x = nx;
		isc.norm.y = ny;
		isc.refl.x = -ddot * nx + dx;
		isc.refl.y = -ddot * ny + dy;
		isc.edge = edge;
	}
};
justTriangles_PolyK.getPoints = function(ps,ind0,ind1) {
	var n = ps.length;
	var nps = [];
	if(ind1 < ind0) {
		ind1 += n;
	}
	var l = ind1 + 1;
	var _g1 = ind0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		nps.push(ps[i % n]);
	}
	return nps;
};
justTriangles_PolyK.firstWithFlag = function(ps,ind) {
	var n = ps.length;
	while(true) {
		ind = (ind + 1) % n;
		if(ps[ind].flag) {
			return ind;
		}
	}
};
justTriangles_PolyK.pointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax;
	var v0y = cy - ay;
	var v1x = bx - ax;
	var v1y = by - ay;
	var v2x = px - ax;
	var v2y = py - ay;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
justTriangles_PolyK.rayLineIntersection = function(a1,a2,b1,b2,c) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = c;
	var iDen = 1 / Den;
	I.x = (A * dbx - dax * B) * iDen;
	I.y = (A * dby - day * B) * iDen;
	if(!justTriangles_PolyK.inRect(I,b1,b2)) {
		return null;
	}
	if(day > 0 && I.y > a1.y || day < 0 && I.y < a1.y) {
		return null;
	}
	if(dax > 0 && I.x > a1.x || dax < 0 && I.x < a1.x) {
		return null;
	}
	return I;
};
justTriangles_PolyK.getLineIntersection = function(a1,a2,b1,b2) {
	var dax = a1.x - a2.x;
	var dbx = b1.x - b2.x;
	var day = a1.y - a2.y;
	var dby = b1.y - b2.y;
	var Den = dax * dby - day * dbx;
	if(Den == 0) {
		return null;
	}
	var A = a1.x * a2.y - a1.y * a2.x;
	var B = b1.x * b2.y - b1.y * b2.x;
	var I = { x : (A * dbx - dax * B) / Den, y : (A * dby - day * B) / Den, flag : false};
	if(justTriangles_PolyK.inRect(I,a1,a2) && justTriangles_PolyK.inRect(I,b1,b2)) {
		return I;
	}
	return null;
};
justTriangles_PolyK.inRect = function(a,b,c) {
	var minx = Math.min(b.x,c.x);
	var maxx = Math.max(b.x,c.x);
	var miny = Math.min(b.y,c.y);
	var maxy = Math.max(b.y,c.y);
	if(minx == maxx) {
		if(miny <= a.y) {
			return a.y <= maxy;
		} else {
			return false;
		}
	}
	if(miny == maxy) {
		if(minx <= a.x) {
			return a.x <= maxx;
		} else {
			return false;
		}
	}
	if(minx <= a.x + 0.0000000001 && a.x - 0.0000000001 <= maxx && miny <= a.y + 0.0000000001) {
		return a.y - 0.0000000001 <= maxy;
	} else {
		return false;
	}
};
justTriangles_PolyK.convex = function(ax,ay,bx,by,cx,cy) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0;
};
justTriangles_PolyK.dist = function(a,b) {
	var dx = b.x - a.x;
	var dy = b.y - a.y;
	return Math.sqrt(dx * dx + dy * dy);
};
justTriangles_PolyK.prototype = {
	__class__: justTriangles_PolyK
};
var justTriangles_SevenSeg = function(id_,colorID_,width_,height_) {
	this.outline = true;
	this.colorID = 0;
	this.unit = 0.01;
	this.height = 0.18;
	this.width = 0.10;
	this.id = id_;
	this.colorID = colorID_;
	this.height = height_;
	this.width = width_;
	this.unit = width_ * 0.1;
	this.gap = this.unit / 5;
	this.spacing = this.width + this.unit * 1.5;
	this.triangles = [];
};
justTriangles_SevenSeg.__name__ = true;
justTriangles_SevenSeg.prototype = {
	numberWidth: function(val) {
		var str = val == null ? "null" : "" + val;
		return this.stringWidth(str);
	}
	,stringWidth: function(str) {
		var l = str.length;
		var space = 0.;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			space += this.spacing;
		}
		return space;
	}
	,addNumber: function(val,x_,y_,centre) {
		if(centre == null) {
			centre = false;
		}
		var str = val == null ? "null" : "" + val;
		this.addString(str,x_,y_,centre);
	}
	,addString: function(str,x_,y_,centre) {
		if(centre == null) {
			centre = false;
		}
		var l = str.length;
		var space = 0.;
		if(centre) {
			var _g1 = 0;
			var _g = l;
			while(_g1 < _g) {
				var i = _g1++;
				space += this.spacing;
			}
			space -= this.unit * 1.5;
			space = -space / 2;
			y_ -= this.height / 2;
		}
		var _g11 = 0;
		var _g2 = l;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.addDigit(Std.parseInt(HxOverrides.substr(str,i1,1)),x_ + space,y_);
			space += this.spacing;
		}
	}
	,addDigit: function(hexCode,x_,y_) {
		this.x = x_;
		this.y = y_;
		switch(hexCode) {
		case 0:
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			break;
		case 1:
			this.b();
			this.c();
			break;
		case 2:
			this.a();
			this.b();
			this.g();
			this.e();
			this.d();
			break;
		case 3:
			this.a();
			this.b();
			this.g();
			this.c();
			this.d();
			break;
		case 4:
			this.f();
			this.g();
			this.b();
			this.c();
			break;
		case 5:
			this.a();
			this.f();
			this.g();
			this.c();
			this.d();
			break;
		case 6:
			this.a();
			this.f();
			this.g();
			this.c();
			this.d();
			this.e();
			break;
		case 7:
			this.a();
			this.b();
			this.c();
			break;
		case 8:
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			this.g();
			break;
		case 9:
			this.g();
			this.f();
			this.a();
			this.b();
			this.c();
			break;
		case 10:
			this.e();
			this.f();
			this.a();
			this.b();
			this.c();
			this.g();
			break;
		case 11:
			this.f();
			this.g();
			this.c();
			this.d();
			this.e();
			break;
		case 12:
			this.a();
			this.f();
			this.e();
			this.d();
			break;
		case 13:
			this.b();
			this.g();
			this.e();
			this.d();
			this.c();
			break;
		case 14:
			this.a();
			this.f();
			this.g();
			this.e();
			this.d();
			break;
		case 15:
			this.a();
			this.f();
			this.g();
			this.e();
			break;
		}
	}
	,a: function() {
		this.horiSeg(this.x,this.y);
	}
	,b: function() {
		this.vertSeg(this.x + this.width - 2 * this.unit,this.y);
	}
	,c: function() {
		var hi = this.height / 2;
		this.vertSeg(this.x + this.width - 2 * this.unit,this.y + hi - this.unit);
	}
	,d: function() {
		this.horiSeg(this.x,this.y + this.height - 2 * this.unit);
	}
	,e: function() {
		var hi = this.height / 2;
		this.vertSeg(this.x,this.y + hi - this.unit);
	}
	,f: function() {
		this.vertSeg(this.x,this.y);
	}
	,g: function() {
		var hi = this.height / 2;
		this.horiSeg(this.x,this.y + hi - this.unit);
	}
	,dp: function() {
	}
	,horiSeg: function(x_,y_) {
		var tri = this.triangles;
		var l = tri.length;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + this.unit + this.gap, y : y_ + this.unit},{ x : x_ + 2 * this.unit, y : y_},{ x : x_ + this.width - this.unit - this.gap, y : y_ + this.unit},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + 2 * this.unit, y : y_},{ x : x_ + this.width - 2 * this.unit, y : y_},{ x : x_ + this.width - this.unit - this.gap, y : y_ + this.unit},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + this.unit + this.gap, y : y_ + this.unit},{ x : x_ + this.width - this.unit - this.gap, y : y_ + this.unit},{ x : x_ + this.width - 2 * this.unit, y : y_ + 2 * this.unit},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + this.unit + this.gap, y : y_ + this.unit},{ x : x_ + this.width - 2 * this.unit, y : y_ + 2 * this.unit},{ x : x_ + 2 * this.unit, y : y_ + 2 * this.unit},0,this.colorID);
	}
	,vertSeg: function(x_,y_) {
		var tri = this.triangles;
		var l = tri.length;
		var hi = this.height / 2;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_, y : y_ + 2 * this.unit},{ x : x_ + this.unit, y : y_ + hi - this.gap},{ x : x_, y : y_ + hi - this.unit + this.gap},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_, y : y_ + 2 * this.unit},{ x : x_ + this.unit, y : y_ + this.unit + this.gap},{ x : x_ + this.unit, y : y_ + hi - this.gap},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + this.unit, y : y_ + this.unit + this.gap},{ x : x_ + 2 * this.unit, y : y_ + hi - this.unit},{ x : x_ + this.unit, y : y_ + hi - this.gap},0,this.colorID);
		++l;
		tri[l] = new justTriangles_Triangle(this.id,this.outline,{ x : x_ + this.unit, y : y_ + this.unit + this.gap},{ x : x_ + 2 * this.unit, y : y_ + 2 * this.unit},{ x : x_ + 2 * this.unit, y : y_ + hi - this.unit},0,this.colorID);
	}
	,render: function() {
		var tri = this.triangles;
		var l = tri.length;
		var l2 = justTriangles_Triangle.triangles.length;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			justTriangles_Triangle.triangles[l2 + i] = tri[i];
		}
	}
	,clear: function() {
		this.triangles = [];
	}
	,__class__: justTriangles_SevenSeg
};
var justTriangles_ShapePoints = function() { };
justTriangles_ShapePoints.__name__ = true;
justTriangles_ShapePoints.boxPoints = function(p,wid,hi) {
	var p1 = [{ x : p.x, y : p.y},{ x : p.x + wid, y : p.y},{ x : p.x + wid, y : p.y + hi},{ x : p.x, y : p.y + hi},{ x : p.x, y : p.y},{ x : p.x + wid, y : p.y},{ x : p.x + wid, y : p.y + hi}];
	return p1;
};
justTriangles_ShapePoints.box = function(x,y,wid,hi) {
	var p = [{ x : x, y : y},{ x : x + wid, y : y},{ x : x + wid, y : y + hi},{ x : x, y : y + hi},{ x : x, y : y},{ x : x + wid, y : y},{ x : x + wid, y : y + hi}];
	p.reverse();
	return p;
};
justTriangles_ShapePoints.equalTri = function(dx,dy,radius,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	var p = [];
	var angle = 0;
	var offset = -2.5 * Math.PI * 2 / 6 - Math.PI + rotation;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		angle = i * (Math.PI * 2) / 3 - offset;
		p.push({ x : dx + radius * Math.cos(angle), y : dy + radius * Math.sin(angle)});
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.polyPoints = function(d,radius,sides,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var offset = rotation - Math.PI / 2;
	var tot = sides + 3;
	var _g1 = 0;
	var _g = tot;
	while(_g1 < _g) {
		var i = _g1++;
		angle = i * angleInc;
		angle += offset;
		p[tot - i - 1] = { x : d.x + radius * Math.cos(angle), y : d.y + radius * Math.sin(angle)};
	}
	return p;
};
justTriangles_ShapePoints.poly = function(dx,dy,radius,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var _g1 = 0;
	var _g = sides + 3;
	while(_g1 < _g) {
		var i = _g1++;
		angle = i * angleInc;
		p.push({ x : dx + radius * Math.cos(angle), y : dy + radius * Math.sin(angle)});
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.horizontalWave = function(x_,dx_,y_,amplitude,sides,repeats) {
	var p = [];
	var dx = 0;
	var angleInc = Math.PI * 2 / sides;
	var len = Std["int"](sides * repeats);
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		p.push({ x : x_ + (dx += dx_), y : y_ + amplitude * Math.sin(i * angleInc)});
	}
	return p;
};
justTriangles_ShapePoints.verticalWave = function(x_,y_,dy_,amplitude,sides,repeats) {
	var p = [];
	var dy = 0;
	var angleInc = Math.PI * 2 / sides;
	var len = Std["int"](sides * repeats);
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		p.push({ y : y_ + (dy += dy_), x : x_ + amplitude * Math.sin(i * angleInc)});
	}
	return p;
};
justTriangles_ShapePoints.arcPoints = function(d,radius,start,dA,sides) {
	var p = [];
	var dx = d.x;
	var dy = d.y;
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var sides1 = Math.round(sides);
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			nextAngle = angle + start;
			--i;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	return p;
};
justTriangles_ShapePoints.arc_internal = function(dx,dy,radius,start,dA,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var sides1 = Math.round(sides);
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
		p.reverse();
	}
	return p;
};
justTriangles_ShapePoints.arc = function(dx,dy,radius,start,dA,sides) {
	var p = [];
	var angle = 0;
	var angleInc = Math.PI * 2 / sides;
	var sides1 = Math.round(sides);
	var nextAngle;
	if(dA < 0) {
		var i = -1;
		while(true) {
			angle = i * angleInc;
			--i;
			nextAngle = angle + start;
			if(angle <= dA) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	} else {
		var i1 = -1;
		while(true) {
			angle = i1 * angleInc;
			++i1;
			nextAngle = angle + start;
			if(angle >= dA + angleInc) {
				break;
			}
			p.push({ x : dx + radius * Math.cos(nextAngle), y : dy + radius * Math.sin(nextAngle)});
		}
	}
	p.reverse();
	return p;
};
justTriangles_ShapePoints.quadCurve = function(p0,p1,p2) {
	var p = [];
	var approxDistance = justTriangles_ShapePoints.distance(p0,p1) + justTriangles_ShapePoints.distance(p1,p2);
	var v;
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.quadStep);
	var arr = [p0,p1,p2];
	var t = 0.0;
	p.push(p0);
	t += step;
	while(t < 1) {
		v = justTriangles_Bezier.quadratic(t,arr);
		p.push({ x : v.x, y : v.y});
		t += step;
	}
	p.push(p2);
	return p;
};
justTriangles_ShapePoints.cubicCurve = function(p0,p1,p2,p3) {
	var p = [];
	var approxDistance = justTriangles_ShapePoints.distance(p0,p1) + justTriangles_ShapePoints.distance(p1,p2) + justTriangles_ShapePoints.distance(p2,p3);
	var v;
	if(approxDistance == 0) {
		approxDistance = 0.000001;
	}
	var step = Math.min(1 / (approxDistance * 0.707),justTriangles_ShapePoints.cubicStep);
	var arr = [p0,p1,p2,p3];
	var t = 0.0;
	v = justTriangles_Bezier.cubic(0.0,arr);
	p.push({ x : v.x, y : v.y});
	t += step;
	while(t < 1) {
		v = justTriangles_Bezier.cubic(t,arr);
		p.push({ x : v.x, y : v.y});
		t += step;
	}
	v = justTriangles_Bezier.cubic(1.0,arr);
	p.push({ x : v.x, y : v.y});
	return p;
};
justTriangles_ShapePoints.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justTriangles_ShapePoints.quadraticBezier = function(t,arr) {
	return { x : justTriangles_ShapePoints._quadraticBezier(t,arr[0].x,arr[1].x,arr[2].x), y : justTriangles_ShapePoints._quadraticBezier(t,arr[0].y,arr[1].y,arr[2].y)};
};
justTriangles_ShapePoints._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
var justTriangles_SixteenSeg = function(id_,colorID_,width_,height_) {
	this.outline = true;
	this.depth = 0;
	this.sy = 1.;
	this.sx = 1.;
	this.colorID = 0;
	this.id = id_;
	this.colorID = colorID_;
	this.height = height_;
	this.width = width_;
	this.sx = this.width / 11;
	this.sy = this.height / 18;
	this.spacing = this.width * 14 / 11;
	this.triangles = [];
};
justTriangles_SixteenSeg.__name__ = true;
justTriangles_SixteenSeg.prototype = {
	stringWidth: function(str) {
		var l = str.length;
		var space = 0.;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			space += this.spacing;
		}
		return space;
	}
	,addNumber: function(val,x_,y_,centre) {
		if(centre == null) {
			centre = false;
		}
		var str = val == null ? "null" : "" + val;
		this.add(str,x_,y_,centre);
	}
	,add: function(str,x_,y_,centre) {
		if(centre == null) {
			centre = false;
		}
		var l = str.length;
		var space = 0.;
		if(centre) {
			var _g1 = 0;
			var _g = l;
			while(_g1 < _g) {
				var i = _g1++;
				space += this.spacing;
			}
			space -= this.width * 14 / 11;
			space = -space / 2;
			y_ -= this.height / 2;
		}
		var _g11 = 0;
		var _g2 = l;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.addChar(HxOverrides.substr(str,i1,1),x_ + space,y_);
			space += this.spacing;
		}
	}
	,addChar: function(str,x_,y_) {
		this.x = x_;
		this.y = y_;
		switch(str) {
		case "":
			this.k();
			this.m();
			break;
		case "!":
			this.b();
			this.c();
			break;
		case "\"":
			this.f();
			this.b();
			break;
		case "#":
			this.f();
			this.e();
			this.d();
			this.g();
			this.i();
			this.l();
			break;
		case "$":
			this.a();
			this.f();
			this.g();
			this.c();
			this.d();
			this.i();
			this.l();
			break;
		case "%":
			this.a1();
			this.f();
			this.g();
			this.c();
			this.d2();
			this.i();
			this.j();
			this.k();
			this.l();
			break;
		case "&":
			this.a1();
			this.f();
			this.h();
			this.g1();
			this.e();
			this.d();
			this.m();
			this.j();
			break;
		case "'":
			this.b();
			break;
		case "(":
			this.j();
			this.m();
			break;
		case ")":
			this.h();
			this.k();
			break;
		case "*":
			this.g();
			this.h();
			this.i();
			this.j();
			this.k();
			this.l();
			this.m();
			break;
		case "+":
			this.i();
			this.g();
			this.l();
			break;
		case ",":
			this.d1();
			break;
		case "-":
			this.g();
			break;
		case ".":
			break;
		case "/":
			this.j();
			this.k();
			break;
		case "0":
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			this.j();
			this.k();
			break;
		case "1":
			this.b();
			this.c();
			break;
		case "2":
			this.a();
			this.b();
			this.g();
			this.e();
			this.d();
			break;
		case "3":
			this.a();
			this.b();
			this.g();
			this.c();
			this.d();
			break;
		case "4":
			this.f();
			this.g();
			this.b();
			this.c();
			break;
		case "5":
			this.a();
			this.f();
			this.g();
			this.c();
			this.d();
			break;
		case "6":
			this.a();
			this.f();
			this.g();
			this.e();
			this.c();
			this.d();
			break;
		case "7":
			this.a();
			this.b();
			this.c();
			break;
		case "8":
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			this.g();
			break;
		case "9":
			this.a();
			this.b();
			this.f();
			this.g();
			this.c();
			this.d();
			break;
		case ":":
			this.g1();
			this.d1();
			break;
		case ";":
			this.a1();
			this.k();
			break;
		case "<":
			this.j();
			this.m();
			break;
		case "=":
			this.g();
			this.d();
			break;
		case ">":
			this.h();
			this.k();
			break;
		case "?":
			this.a2();
			this.b();
			this.g2();
			this.l();
			break;
		case "@":
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.g1();
			this.l();
			break;
		case "A":
			this.e();
			this.f();
			this.a1();
			this.a2();
			this.b();
			this.c();
			this.g();
			break;
		case "B":
			this.a();
			this.b();
			this.c();
			this.d();
			this.g2();
			this.l();
			this.i();
			break;
		case "C":
			this.a();
			this.f();
			this.e();
			this.d();
			break;
		case "D":
			this.a();
			this.b();
			this.c();
			this.d();
			this.i();
			this.l();
			break;
		case "E":
			this.a();
			this.f();
			this.g1();
			this.e();
			this.d();
			break;
		case "F":
			this.a();
			this.f();
			this.g1();
			this.e();
			break;
		case "G":
			this.a();
			this.f();
			this.e();
			this.d();
			this.c();
			this.g2();
			break;
		case "H":
			this.f();
			this.g();
			this.b();
			this.c();
			this.e();
			break;
		case "I":
			this.a();
			this.i();
			this.l();
			this.d();
			break;
		case "J":
			this.b();
			this.c();
			this.d();
			this.e();
			break;
		case "K":
			this.f();
			this.g1();
			this.e();
			this.j();
			this.m();
			break;
		case "L":
			this.f();
			this.e();
			this.d();
			break;
		case "M":
			this.e();
			this.f();
			this.h();
			this.j();
			this.b();
			this.c();
			break;
		case "N":
			this.e();
			this.f();
			this.h();
			this.m();
			this.c();
			this.b();
			break;
		case "O":
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			break;
		case "P":
			this.a();
			this.b();
			this.g();
			this.f();
			this.e();
			break;
		case "Q":
			this.a();
			this.b();
			this.c();
			this.d();
			this.e();
			this.f();
			this.m();
			break;
		case "R":
			this.a();
			this.b();
			this.g();
			this.m();
			this.f();
			this.e();
			break;
		case "S":
			this.a();
			this.f();
			this.g();
			this.c();
			this.d();
			break;
		case "T":
			this.a();
			this.i();
			this.l();
			break;
		case "U":
			this.f();
			this.e();
			this.d();
			this.c();
			this.b();
			this.c();
			break;
		case "V":
			this.f();
			this.e();
			this.j();
			this.k();
			break;
		case "W":
			this.f();
			this.e();
			this.k();
			this.m();
			this.c();
			this.b();
			break;
		case "X":
			this.h();
			this.j();
			this.k();
			this.m();
			break;
		case "Y":
			this.h();
			this.j();
			this.l();
			break;
		case "Z":
			this.a();
			this.j();
			this.k();
			this.d();
			break;
		case "[":
			this.a2();
			this.i();
			this.l();
			this.d2();
			break;
		case "\\":
			this.h();
			this.m();
			break;
		case "]":
			this.a1();
			this.i();
			this.l();
			this.d1();
			break;
		case "_":
			this.d1();
			this.d2();
			break;
		case "`":
			this.h();
			break;
		case "a":
			this.g1();
			this.e();
			this.l();
			this.d();
			break;
		case "b":
			this.f();
			this.g1();
			this.g2();
			this.c();
			this.d();
			this.e();
			break;
		case "c":
			this.g();
			this.e();
			this.d();
			break;
		case "d":
			this.b();
			this.g();
			this.e();
			this.d();
			this.c();
			break;
		case "e":
			this.g1();
			this.e();
			this.k();
			this.d1();
			this.d2();
			break;
		case "f":
			this.a2();
			this.i();
			this.g();
			this.l();
			break;
		case "g":
			this.g1();
			this.e();
			this.k();
			this.m();
			this.d2();
			break;
		case "h":
			this.f();
			this.g();
			this.c();
			this.e();
			break;
		case "i":
			this.a1();
			this.g1();
			this.l();
			this.d();
			break;
		case "j":
			this.a2();
			this.g2();
			this.c();
			this.d();
			break;
		case "k":
			this.f();
			this.g();
			this.m();
			this.e();
			break;
		case "l":
			this.a1();
			this.i();
			this.l();
			this.d2();
			break;
		case "m":
			this.e();
			this.g();
			this.l();
			this.c();
			break;
		case "n":
			this.e();
			this.g();
			this.c();
			break;
		case "o":
			this.e();
			this.g();
			this.d();
			this.c();
			break;
		case "p":
			this.d1();
			this.l();
			this.m();
			this.g2();
			this.c();
			break;
		case "q":
			this.e();
			this.g();
			this.c();
			this.m();
			this.d();
			break;
		case "r":
			this.e();
			this.g();
			break;
		case "s":
			this.g2();
			this.m();
			this.d();
			break;
		case "t":
			this.i();
			this.g();
			this.l();
			this.d2();
			break;
		case "u":
			this.e();
			this.d();
			this.c();
			break;
		case "v":
			this.e();
			this.k();
			break;
		case "w":
			this.e();
			this.k();
			this.m();
			this.c();
			break;
		case "x":
			this.g();
			this.k();
			this.m();
			break;
		case "y":
			this.m();
			this.c();
			this.d();
			break;
		case "z":
			this.g1();
			this.k();
			this.d1();
			break;
		case "{":
			this.a2();
			this.i();
			this.g1();
			this.l();
			this.d2();
			break;
		case "|":
			this.i();
			this.l();
			break;
		case "}":
			this.a1();
			this.i();
			this.g2();
			this.l();
			this.d1();
			break;
		case "£":
			this.a2();
			this.i();
			this.g();
			this.k();
			this.d();
			break;
		case "±":
			this.i();
			this.g();
			this.l();
			this.d();
			break;
		}
	}
	,a: function() {
		this.a1();
		this.a2();
	}
	,g: function() {
		this.g1();
		this.g2();
	}
	,d: function() {
		this.d1();
		this.d2();
	}
	,triFactory: function(ax,ay,bx,by,cx,cy) {
		return new justTriangles_Triangle(this.id,this.outline,{ x : this.x + this.sx * ax, y : this.y + this.sy * ay},{ x : this.x + this.sx * bx, y : this.y + this.sy * by},{ x : this.x + this.sx * cx, y : this.y + this.sy * cy},this.depth,this.colorID);
	}
	,a1: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(1.,0.5,1.5,0.,5.,0.);
		++l_;
		tri[l_] = this.triFactory(1.,0.5,5.,0.,5. + third,0.5);
		++l_;
		tri[l_] = this.triFactory(1.,0.5,5 + third,0.5,5 + third,2.);
		++l_;
		tri[l_] = this.triFactory(1.,0.5,5 + third,2.,2.5,2.);
	}
	,a2: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(6. - third,0.5,6.,0.,9.5,0.);
		++l_;
		tri[l_] = this.triFactory(6. - third,0.5,9.5,0.,10.,0.5);
		++l_;
		tri[l_] = this.triFactory(6. - third,0.5,10.,0.5,8.5,2.);
		++l_;
		tri[l_] = this.triFactory(6 - third,0.5,8.5,0.5,6 - third,2.0);
	}
	,b: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(9.,2.5,10.5,1.,11.,1.5);
		++l_;
		tri[l_] = this.triFactory(9.,2.5,11.,1.5,11.,7.5);
		++l_;
		tri[l_] = this.triFactory(9.,7.5,11.,7.5,10.5,8.5);
		++l_;
		tri[l_] = this.triFactory(9.,2.5,11.,7.5,10.5,8.5);
	}
	,c: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(9.,10.5,10.5,9.5,11.,10.5);
		++l_;
		tri[l_] = this.triFactory(9.,10.5,11.,10.5,11.,16.5);
		++l_;
		tri[l_] = this.triFactory(9.,10.5,11.,16.5,9.,15.5);
		++l_;
		tri[l_] = this.triFactory(9.,15.5,11.,16.5,10.5,17.);
	}
	,d1: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(1.,17.5,2.5,16.,5. + third,16.);
		++l_;
		tri[l_] = this.triFactory(1.,17.5,5. + third,16.,5. + third,17.5);
		++l_;
		tri[l_] = this.triFactory(1.,17.5,5. + third,17.5,5.,18.);
		++l_;
		tri[l_] = this.triFactory(1.,17.5,5.,18.,1.5,18.);
		++l_;
	}
	,d2: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(6. - third,17.5,6. - third,16.,8.5,16.);
		++l_;
		tri[l_] = this.triFactory(6. - third,17.5,8.5,16.,10.,17.);
		++l_;
		tri[l_] = this.triFactory(6. - third,17.5,10.5,17.,9.5,18.);
		++l_;
		tri[l_] = this.triFactory(6. - third,17.5,9.5,18.,6.,18.);
	}
	,e: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(0.,10.5,0.5,9.5,2.,10.5);
		++l_;
		tri[l_] = this.triFactory(0.,10.5,2.,10.5,2.,15.5);
		++l_;
		tri[l_] = this.triFactory(0.,10.5,2.,15.5,0.,16.);
		++l_;
		tri[l_] = this.triFactory(0.,16.,2.,15.5,0.5,17);
	}
	,f: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(0.,1.5,0.5,1.,2.,2.5);
		++l_;
		tri[l_] = this.triFactory(0.,1.5,2.,2.5,2.,7.5);
		++l_;
		tri[l_] = this.triFactory(0.,1.5,2.,7.5,0.,7.5);
		++l_;
		tri[l_] = this.triFactory(0.,7.5,2.,7.5,0.5,8.5);
	}
	,g1: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(0.5,9.,2.5,8.,2.5,10.);
		++l_;
		tri[l_] = this.triFactory(2.5,8.,5. + third,8.,5 + third,10.);
		++l_;
		tri[l_] = this.triFactory(2.5,8.,5. + third,10.,2.5,10.);
	}
	,g2: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		var third = 0.333333333333333315;
		tri[l_] = this.triFactory(6. - third,8.,8.5,8.,8.5,10.);
		++l_;
		tri[l_] = this.triFactory(6. - third,8.5,8.5,10.,6. - third,10.);
		++l_;
		tri[l_] = this.triFactory(8.5,8.,10.5,9.,8.5,10.);
	}
	,h: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(2.5,2.5,3.5,2.5,4.,4.);
		++l_;
		tri[l_] = this.triFactory(4.,4.,5.,7.5,4.,7.5);
		++l_;
		tri[l_] = this.triFactory(2.5,2.5,4.,4.,2.5,5.);
		++l_;
		tri[l_] = this.triFactory(2.5,5.,4.,4.,4.,7.5);
	}
	,i: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(4.5,2.5,6.5,2.5,6.5,4.);
		++l_;
		tri[l_] = this.triFactory(4.5,2.5,6.5,4.,4.5,4.);
		++l_;
		tri[l_] = this.triFactory(4.5,4.,6.5,4.,5.5,7.5);
	}
	,j: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(6.5,7.5,7.,4.,7.,7.5);
		++l_;
		tri[l_] = this.triFactory(7.,4.,7.5,2.5,8.5,2.5);
		++l_;
		tri[l_] = this.triFactory(7.,4.,8.5,2.5,8.5,4.);
		++l_;
		tri[l_] = this.triFactory(7.,4.,8.5,4.,7.,7.5);
	}
	,k: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(2.5,13.,4.,10.5,5.,10.5);
		++l_;
		tri[l_] = this.triFactory(2.5,13.,5.5,10.5,4.,14.);
		++l_;
		tri[l_] = this.triFactory(2.5,13.,4.,14.,3.5,15.);
		++l_;
		tri[l_] = this.triFactory(2.5,13.,3.5,15.,2.5,15.);
	}
	,l: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(4.5,14.,5.5,10.5,6.5,14.);
		++l_;
		tri[l_] = this.triFactory(4.5,14.,6.5,14.,6.5,15.5);
		++l_;
		tri[l_] = this.triFactory(4.5,14.,6.5,15.5,4.5,15.5);
	}
	,m: function() {
		var tri = this.triangles;
		var l_ = tri.length;
		tri[l_] = this.triFactory(6.,10.5,6.5,10.,8.5,13.);
		++l_;
		tri[l_] = this.triFactory(6.,10.5,8.5,13.,7.,14.);
		++l_;
		tri[l_] = this.triFactory(7.,14.,8.5,13.,8.5,15.5);
		++l_;
		tri[l_] = this.triFactory(7.,14.,8.5,15.5,7.5,15.5);
	}
	,render: function() {
		var tri = this.triangles;
		var l = tri.length;
		var l2 = justTriangles_Triangle.triangles.length;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			justTriangles_Triangle.triangles[l2 + i] = tri[i];
		}
	}
	,clear: function() {
		this.triangles = [];
	}
	,__class__: justTriangles_SixteenSeg
};
var justTriangles_Triangle = function(id_,outline_,A_,B_,C_,depth_,colorID_) {
	this.id = id_;
	this.outline = outline_;
	if(justTriangles_Triangle.adjustWinding(A_,B_,C_)) {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = C_.x;
		this.by = C_.y;
		this.cx = B_.x;
		this.cy = B_.y;
	} else {
		this.ax = A_.x;
		this.ay = A_.y;
		this.bx = B_.x;
		this.by = B_.y;
		this.cx = C_.x;
		this.cy = C_.y;
	}
	this.depth = depth_;
	this.colorID = colorID_;
};
justTriangles_Triangle.__name__ = true;
justTriangles_Triangle.drawTri = function(id,outline,p0,p1,p2,colorID) {
	justTriangles_Triangle.triangles.push(new justTriangles_Triangle(id,outline,p0,p1,p2,0,colorID));
};
justTriangles_Triangle.adjustWinding = function(A_,B_,C_) {
	var val = !(justTriangles_Triangle.cross(justTriangles_Triangle.subtract(B_,A_),justTriangles_Triangle.subtract(C_,A_)) < 0);
	return val;
};
justTriangles_Triangle.subtract = function(p0,p1) {
	return { x : p0.x - p1.x, y : p0.y - p1.y};
};
justTriangles_Triangle.cross = function(p0,p1) {
	return p0.x * p1.y - p0.y * p1.x;
};
justTriangles_Triangle.prototype = {
	get_x: function() {
		return Math.min(Math.min(this.ax,this.bx),this.cx);
	}
	,set_x: function(x) {
		var dx = x - this.get_x();
		this.ax += dx;
		this.bx += dx;
		this.cx += dx;
		return x;
	}
	,get_y: function() {
		return Math.min(Math.min(this.ay,this.by),this.cy);
	}
	,set_y: function(y) {
		var dy = y - this.get_y();
		this.ay += dy;
		this.by += dy;
		this.cy += dy;
		return y;
	}
	,get_right: function() {
		return Math.max(Math.max(this.ax,this.bx),this.cx);
	}
	,get_bottom: function() {
		return Math.max(Math.max(this.ay,this.by),this.cy);
	}
	,moveDelta: function(dx,dy) {
		this.ax += dx;
		this.ay += dy;
		this.bx += dx;
		this.by += dy;
		this.cx += dx;
		this.cy += dy;
	}
	,hitTest: function(P) {
		var px = P.x;
		var py = P.y;
		if(px > this.get_x() && px < this.get_right() && py > this.get_y() && py < this.get_bottom()) {
			return true;
		}
		var planeAB = (this.ax - px) * (this.by - py) - (this.bx - px) * (this.ay - py);
		var planeBC = (this.bx - px) * (this.cy - py) - (this.cx - px) * (this.by - py);
		var planeCA = (this.cx - px) * (this.ay - py) - (this.ax - px) * (this.cy - py);
		if(this.sign(planeAB) == this.sign(planeBC)) {
			return this.sign(planeBC) == this.sign(planeCA);
		} else {
			return false;
		}
	}
	,sign: function(n) {
		return Std["int"](Math.abs(n) / n);
	}
	,__class__: justTriangles_Triangle
};
var justTrianglesWebGL_Drawing = function(width_,height_,autoChild) {
	htmlHelper_webgl_WebGLSetup.call(this,width_,height_,autoChild);
};
justTrianglesWebGL_Drawing.__name__ = true;
justTrianglesWebGL_Drawing.create = function(dim_) {
	justTriangles_Draw.drawTri = justTriangles_Triangle.drawTri;
	var webgl = new justTrianglesWebGL_Drawing(dim_,dim_);
	webgl.setupProgram("attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.0);" + " vcol = color;" + "}","precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}");
	new htmlHelper_tools_CSSEnterFrame().onFrame = $bind(webgl,webgl.render);
	return webgl;
};
justTrianglesWebGL_Drawing.__super__ = htmlHelper_webgl_WebGLSetup;
justTrianglesWebGL_Drawing.prototype = $extend(htmlHelper_webgl_WebGLSetup.prototype,{
	render: function() {
		if(this.transformationFunc != null) {
			this.modelViewProjection = this.transformationFunc();
		}
		htmlHelper_webgl_WebGLSetup.prototype.render.call(this);
	}
	,setTriangles: function(triangles,triangleColors) {
		var rgb;
		var colorAlpha = 1.0;
		var tri;
		var count = 0;
		var _g1 = 0;
		var _g = triangles.length;
		while(_g1 < _g) {
			var i = _g1++;
			tri = triangles[i];
			this.vertices.push(tri.ax - 0.5);
			this.vertices.push(-tri.ay + 0.5);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.bx - 0.5);
			this.vertices.push(-tri.by + 0.5);
			this.vertices.push(tri.depth);
			this.vertices.push(tri.cx - 0.5);
			this.vertices.push(-tri.cy + 0.5);
			this.vertices.push(tri.depth);
			rgb = htmlHelper_webgl_WebGLSetup.toRGB(triangleColors[tri.colorID]);
			var _g2 = 0;
			while(_g2 < 3) {
				var k = _g2++;
				this.colors.push(rgb.r);
				this.colors.push(rgb.g);
				this.colors.push(rgb.b);
				this.colors.push(colorAlpha);
				this.indices.push(count++);
			}
		}
		htmlHelper_webgl_WebGLSetup.uploadDataToBuffers(this.gl,this.program,this.vertices,this.colors,this.indices);
	}
	,__class__: justTrianglesWebGL_Drawing
});
var justTrianglesWebGL_InteractionSurface = function(width_,height_,color_) {
	this.radius = 15;
	this.width = width_;
	this.height = height_;
	this.color = color_;
	this.createBackground();
};
justTrianglesWebGL_InteractionSurface.__name__ = true;
justTrianglesWebGL_InteractionSurface.prototype = {
	setup: function(vertices_,transform_,draw_) {
		this.vertices = vertices_;
		this.transform = transform_;
		this.draw = draw_;
		this.initVerticesHits();
	}
	,initVerticesHits: function() {
		this.limits = [];
		var l = this.vertices.length;
		var v;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			v = this.vertices[i];
			this.setVertexLimit(i,v.x,v.y);
		}
	}
	,createBackground: function() {
		this.doc = js_Browser.get_document();
		this.bg = this.doc.createElement("div");
		this.bg.style.backgroundColor = this.color;
		this.bg.style.width = Std.string(this.width) + "px";
		this.bg.style.height = Std.string(this.height) + "px";
		this.bg.style.position = "absolute";
		this.bg.style.left = "0px";
		this.bg.style.top = "0px";
		this.bg.style.zIndex = "-100";
		this.bg.style.cursor = "default";
		this.doc.body.appendChild(this.bg);
		this.bg.addEventListener("mousedown",$bind(this,this.makePointsDragable));
	}
	,makePointsDragable: function(e) {
		var i = this.hitVertex(e.clientX * 2,e.clientY * 2);
		if(i != null) {
			this.currVertex = i;
			this.bg.style.cursor = "move";
			this.bg.addEventListener("mousemove",$bind(this,this.repositionVertex));
			this.bg.addEventListener("mouseup",$bind(this,this.killMouseMove));
		}
	}
	,hitVertex: function(x,y) {
		var aLimit;
		var p = this.transform(x,y);
		var _g1 = 0;
		var _g = this.limits.length;
		while(_g1 < _g) {
			var i = _g1++;
			aLimit = this.limits[i];
			if(p.x > aLimit.left && p.x < aLimit.right) {
				if(p.y > aLimit.top && p.y < aLimit.bottom) {
					return i;
				}
			}
		}
		return null;
	}
	,killMouseMove: function(e) {
		this.bg.style.cursor = "default";
		this.bg.removeEventListener("mousemove",$bind(this,this.repositionVertex));
		this.bg.removeEventListener("mouseup",$bind(this,this.killMouseMove));
	}
	,repositionVertex: function(e) {
		var x = e.clientX;
		var y = e.clientY;
		this.moveVertex(this.currVertex,x,y);
	}
	,moveVertex: function(i,x,y) {
		this.setVertexLimit(i,x,y);
		var v = this.vertices[i];
		v.x = x * 2;
		v.y = y * 2;
		this.draw();
	}
	,setVertexLimit: function(i,x,y) {
		var p0 = this.transform(x - this.radius,y - this.radius);
		var p1 = this.transform(x + this.radius,y + this.radius);
		this.limits[i] = { left : p0.x, top : p0.y, right : p1.x, bottom : p1.y};
	}
	,__class__: justTrianglesWebGL_InteractionSurface
};
var justTrianglesWebGL_Shader = function() { };
justTrianglesWebGL_Shader.__name__ = true;
var khaMath_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
khaMath_Matrix4.__name__ = true;
khaMath_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new khaMath_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
khaMath_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2 * (Math.PI / 180));
	var uw = uh / aspect;
	return new khaMath_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
khaMath_Matrix4.lookAt = function(eye,at,up) {
	var zaxis = new khaMath_Vector3(at.x - eye.x,at.y - eye.y,at.z - eye.z);
	zaxis.set_length(1);
	var _x = zaxis.y * up.z - zaxis.z * up.y;
	var _y = zaxis.z * up.x - zaxis.x * up.z;
	var _z = zaxis.x * up.y - zaxis.y * up.x;
	var xaxis = new khaMath_Vector3(_x,_y,_z);
	xaxis.set_length(1);
	var _x1 = xaxis.y * zaxis.z - xaxis.z * zaxis.y;
	var _y1 = xaxis.z * zaxis.x - xaxis.x * zaxis.z;
	var _z1 = xaxis.x * zaxis.y - xaxis.y * zaxis.x;
	var yaxis = new khaMath_Vector3(_x1,_y1,_z1);
	return new khaMath_Matrix4(xaxis.x,xaxis.y,xaxis.z,-(xaxis.x * eye.x + xaxis.y * eye.y + xaxis.z * eye.z),yaxis.x,yaxis.y,yaxis.z,-(yaxis.x * eye.x + yaxis.y * eye.y + yaxis.z * eye.z),-zaxis.x,-zaxis.y,-zaxis.z,zaxis.x * eye.x + zaxis.y * eye.y + zaxis.z * eye.z,0,0,0,1);
};
khaMath_Matrix4.prototype = {
	__class__: khaMath_Matrix4
};
var khaMath_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
khaMath_Vector2.__name__ = true;
khaMath_Vector2.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: khaMath_Vector2
};
var khaMath_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
khaMath_Vector3.__name__ = true;
khaMath_Vector3.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: khaMath_Vector3
};
var khaMath_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
khaMath_Vector4.__name__ = true;
khaMath_Vector4.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = this.get_length();
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: khaMath_Vector4
};
var triangulations_Delaunay = function() {
	this.cookie = 0;
	this.tried = [];
	this.unsure = [];
};
triangulations_Delaunay.__name__ = true;
triangulations_Delaunay.ensureDelaunayEdge = function(vertices,edges,coEdges,sideEdges,j) {
	var out;
	if(triangulations_Delaunay.isDelaunayEdge(vertices,edges[j],coEdges[j])) {
		out = false;
	} else {
		var edge = edges[j].clone();
		var coEdge = coEdges[j];
		var se = sideEdges[j];
		var j0 = se.a;
		var j1 = se.b;
		var j2 = se.c;
		var j3 = se.d;
		coEdges[j0].substitute(edge.p,coEdge.q);
		se = sideEdges[j0];
		se.substitute(j,j1);
		se.substitute(j3,j);
		coEdges[j1].substitute(edge.p,coEdge.p);
		se = sideEdges[j1];
		se.substitute(j,j0);
		se.substitute(j2,j);
		coEdges[j2].substitute(edge.q,coEdge.p);
		se = sideEdges[j2];
		se.substitute(j,j3);
		se.substitute(j1,j);
		coEdges[j3].substitute(edge.q,coEdge.q);
		se = sideEdges[j3];
		se.substitute(j,j2);
		se.substitute(j0,j);
		edges[j] = coEdges[j];
		coEdges[j] = edge;
		var tmp = sideEdges[j].a;
		sideEdges[j].a = sideEdges[j].c;
		sideEdges[j].c = tmp;
		out = true;
	}
	return out;
};
triangulations_Delaunay.isDelaunayEdge = function(vertices,edge,coEdge) {
	var a = vertices[edge.p];
	var c = vertices[edge.q];
	var b = vertices[coEdge.p];
	var d = vertices[coEdge.q];
	var in0 = !triangulations_Geom2.pointInCircumcircle(a,c,b,d);
	var in1 = !triangulations_Geom2.pointInCircumcircle(a,c,d,b);
	if(in0) {
		return in1;
	} else {
		return false;
	}
};
triangulations_Delaunay.prototype = {
	refineToDelaunay: function(vertices,edges,coEdges,sideEdges) {
		var unsureEdges = [];
		var l = edges.length;
		var lu = 0;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var j = _g1++;
			if(!edges[j].fixed) {
				unsureEdges[lu] = j;
				++lu;
			}
		}
		var unsureEdges1 = unsureEdges;
		return this.calculate(vertices,edges,coEdges,sideEdges,unsureEdges1);
	}
	,calculate: function(vertices,edges,coEdges,sideEdges,unsureEdges) {
		++this.cookie;
		var triedEdges = unsureEdges.slice(0);
		var _g1 = 0;
		var _g = unsureEdges.length;
		while(_g1 < _g) {
			var l = _g1++;
			this.unsure[unsureEdges[l]] = true;
			this.tried[unsureEdges[l]] = this.cookie;
		}
		while(unsureEdges.length > 0) {
			var j = unsureEdges.pop();
			this.unsure[j] = false;
			triangulations_Delaunay.ensureDelaunayEdge(vertices,edges,coEdges,sideEdges,j);
			if(!edges[j].fixed && !triangulations_Delaunay.ensureDelaunayEdge(vertices,edges,coEdges,sideEdges,j)) {
				var newUnsureCnt = 0;
				var jk = sideEdges[j];
				while(jk.hasNext()) {
					var jk1 = jk.next();
					if(!this.unsure[jk1]) {
						if(this.tried[jk1] != this.cookie) {
							triedEdges.push(jk1);
							this.tried[jk1] = this.cookie;
						}
						if(!edges[jk1].fixed) {
							unsureEdges.push(jk1);
							this.unsure[jk1] = true;
							++newUnsureCnt;
						}
					}
				}
			}
		}
		return triedEdges;
	}
	,__class__: triangulations_Delaunay
};
var triangulations_DllNode = function(value_) {
	this.value = value_;
};
triangulations_DllNode.__name__ = true;
triangulations_DllNode.prototype = {
	toString: function() {
		var p = this.prev.value;
		var n = this.next.value;
		return "" + Std.string(p) + " -> " + Std.string(this.value) + " -> " + Std.string(n);
	}
	,__class__: triangulations_DllNode
};
var triangulations_Edge = function(p_,q_) {
	this.external = false;
	this.fixed = false;
	this.q = null;
	this.p = null;
	this.p = p_;
	this.q = q_;
};
triangulations_Edge.__name__ = true;
triangulations_Edge.Null = function() {
	return new triangulations_Edge(null,null);
};
triangulations_Edge.fromArray = function(arr) {
	return new triangulations_Edge(arr[0],arr[1]);
};
triangulations_Edge.prototype = {
	isNull: function() {
		if(this.p != null) {
			return this.q == null;
		} else {
			return true;
		}
	}
	,clone: function() {
		var e = new triangulations_Edge(this.p,this.q);
		e.fixed = this.fixed;
		e.external = this.external;
		return e;
	}
	,getByIndex: function(k) {
		switch(k) {
		case 0:
			return this.p;
		case 1:
			return this.q;
		default:
			throw new js__$Boot_HaxeError("Error can't get one of the Edges out of range " + k);
		}
	}
	,substitute: function(x,y) {
		if(this.p == x) {
			this.p = y;
		} else {
			this.q = y;
		}
	}
	,push: function(val) {
		if(this.p == null) {
			this.p = val;
		} else if(this.q == null) {
			this.q = val;
		} else {
			throw new js__$Boot_HaxeError("Edge already full can't push");
		}
	}
	,toString: function() {
		var p0 = this.p;
		var q0 = this.q;
		var out = "";
		if(this.fixed == true && this.external == true) {
			out = "Edge( " + p0 + "," + q0 + " ";
			if(this.fixed) {
				out += "fixed ";
			}
			if(this.external) {
				out += "external ";
			}
			out += " )";
		} else {
			out = "Edge( " + p0 + "," + q0 + " )";
		}
		return out;
	}
	,out: function() {
		var p0 = this.p;
		var q0 = this.q;
		return "(" + p0 + "," + q0 + " )";
	}
	,__class__: triangulations_Edge
};
var triangulations__$EdgeVertexTriangle_EdgeVertexTriangle_$Impl_$ = {};
triangulations__$EdgeVertexTriangle_EdgeVertexTriangle_$Impl_$.__name__ = true;
triangulations__$EdgeVertexTriangle_EdgeVertexTriangle_$Impl_$._new = function(e,v) {
	var this1 = { edgeId : e, vertexId : v};
	return this1;
};
var triangulations__$Edges_Edges_$Impl_$ = {};
triangulations__$Edges_Edges_$Impl_$.__name__ = true;
triangulations__$Edges_Edges_$Impl_$._new = function(v) {
	var this1;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this1 = v;
	return this1;
};
triangulations__$Edges_Edges_$Impl_$.getEmpty = function() {
	return triangulations__$Edges_Edges_$Impl_$._new([]);
};
triangulations__$Edges_Edges_$Impl_$.set_fixedExternal = function(this1,val) {
	var _g = 0;
	while(_g < this1.length) {
		var e = this1[_g];
		++_g;
		e.fixed = val;
		e.external = val;
	}
	return val;
};
triangulations__$Edges_Edges_$Impl_$.clone = function(this1) {
	var v = null;
	var this2;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this2 = v;
	var e = this2;
	var l = this1.length;
	var tempIn;
	var tempOut;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		e[i] = this1[i].clone();
	}
	return e;
};
triangulations__$Edges_Edges_$Impl_$.getUnsure = function(this1) {
	var unsureEdges = [];
	var l = this1.length;
	var lu = 0;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var j = _g1++;
		if(!this1[j].fixed) {
			unsureEdges[lu] = j;
			++lu;
		}
	}
	return unsureEdges;
};
triangulations__$Edges_Edges_$Impl_$.add = function(this1,e) {
	var l = this1.length;
	var el = e.length;
	var _g1 = 0;
	var _g = el;
	while(_g1 < _g) {
		var i = _g1++;
		this1[l + i] = e[i];
	}
	return this1;
};
triangulations__$Edges_Edges_$Impl_$.fromArrayArray = function(arr) {
	var edges = triangulations__$Edges_Edges_$Impl_$._new([]);
	var l = arr.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		edges[i] = triangulations_Edge.fromArray(arr[i]);
	}
	return edges;
};
triangulations__$Edges_Edges_$Impl_$.flipEdge = function(this1,coEdges,sideEdges,j) {
	var edge = this1[j].clone();
	var coEdge = coEdges[j];
	var se = sideEdges[j];
	var j0 = se.a;
	var j1 = se.b;
	var j2 = se.c;
	var j3 = se.d;
	coEdges[j0].substitute(edge.p,coEdge.q);
	se = sideEdges[j0];
	se.substitute(j,j1);
	se.substitute(j3,j);
	coEdges[j1].substitute(edge.p,coEdge.p);
	se = sideEdges[j1];
	se.substitute(j,j0);
	se.substitute(j2,j);
	coEdges[j2].substitute(edge.q,coEdge.p);
	se = sideEdges[j2];
	se.substitute(j,j3);
	se.substitute(j1,j);
	coEdges[j3].substitute(edge.q,coEdge.q);
	se = sideEdges[j3];
	se.substitute(j,j2);
	se.substitute(j0,j);
	this1[j] = coEdges[j];
	coEdges[j] = edge;
	var tmp = sideEdges[j].a;
	sideEdges[j].a = sideEdges[j].c;
	sideEdges[j].c = tmp;
};
triangulations__$Edges_Edges_$Impl_$.toString = function(this1) {
	var out = "Edges( ";
	var e;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		e = this1[i];
		out += e.toString() + ",";
	}
	out = HxOverrides.substr(out,0,out.length - 1);
	out += " )";
	return out;
};
triangulations__$Edges_Edges_$Impl_$.out = function(this1) {
	var out = "";
	var e;
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		out += this1[i].out() + ",";
	}
	out = HxOverrides.substr(out,0,out.length - 1);
	return out;
};
var triangulations_EdgesVertices = function(edges_,vertices_) {
	this.edges = edges_;
	this.vertices = vertices_;
};
triangulations_EdgesVertices.__name__ = true;
triangulations_EdgesVertices.fromShape = function(f) {
	return new triangulations_EdgesVertices(f.edges,f.vertices);
};
triangulations_EdgesVertices.prototype = {
	hitTestEdgeId: function(v,dist) {
		var l = this.edges.length;
		var e;
		var v0;
		var v1;
		var distance;
		var near = 10000000000;
		var out = null;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e = this.edges[i];
			v0 = this.vertices[e.p];
			v1 = this.vertices[e.q];
			var _this = new khaMath_Vector2((v0.x + v1.x) / 2,(v0.y + v1.y) / 2);
			var dx = _this.x - v.x;
			var dy = _this.y - v.y;
			distance = dx * dx + dy * dy;
			if(near > distance) {
				near = distance;
				out = i;
			}
		}
		if(near > Math.pow(dist,2)) {
			out = null;
		}
		return out;
	}
	,hitTestVertexId: function(v,dist) {
		var l = this.vertices.length;
		var v0;
		var distance;
		var near = 10000000000;
		var out = null;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			v0 = this.vertices[i];
			var dx = v0.x - v.x;
			var dy = v0.y - v.y;
			distance = dx * dx + dy * dy;
			if(near > distance) {
				near = distance;
				out = i;
			}
		}
		if(near > Math.pow(dist,2)) {
			out = null;
		}
		return out;
	}
	,hitTestId: function(v,dist) {
		var l;
		var e;
		var distance;
		var v0;
		var v1;
		l = this.edges.length;
		var nearEdge = 10000000000.;
		var edgeId = null;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e = this.edges[i];
			if(e == null) {
				continue;
			}
			v0 = this.vertices[e.p];
			if(v0 == null) {
				continue;
			}
			v1 = this.vertices[e.q];
			if(v1 == null) {
				continue;
			}
			var _this = new khaMath_Vector2((v0.x + v1.x) / 2,(v0.y + v1.y) / 2);
			var dx = _this.x - v.x;
			var dy = _this.y - v.y;
			distance = dx * dx + dy * dy;
			if(nearEdge > distance) {
				nearEdge = distance;
				edgeId = i;
			}
		}
		var l1 = this.vertices.length;
		var nearVertex = 10000000000.;
		var vertexId = null;
		var _g11 = 0;
		var _g2 = l1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			v0 = this.vertices[i1];
			if(v0 == null) {
				continue;
			}
			var dx1 = v0.x - v.x;
			var dy1 = v0.y - v.y;
			distance = dx1 * dx1 + dy1 * dy1;
			if(nearVertex > distance) {
				nearVertex = distance;
				vertexId = i1;
			}
		}
		var out = null;
		if(nearVertex <= nearEdge) {
			if(nearVertex > Math.pow(dist,2)) {
				out = null;
			} else {
				out = vertexId;
			}
		} else if(nearEdge > Math.pow(dist,2)) {
			out = null;
		} else {
			out = -edgeId - 1;
		}
		return out;
	}
	,__class__: triangulations_EdgesVertices
};
var triangulations__$Face_Face_$Impl_$ = {};
triangulations__$Face_Face_$Impl_$.__name__ = true;
triangulations__$Face_Face_$Impl_$._new = function(v) {
	var this1;
	if(v == null) {
		v = triangulations__$Face_Face_$Impl_$._new([]);
	}
	this1 = v;
	return this1;
};
triangulations__$Face_Face_$Impl_$.getEmpty = function() {
	return triangulations__$Face_Face_$Impl_$._new([]);
};
triangulations__$Face_Face_$Impl_$.clone = function(this1) {
	var f = triangulations__$Face_Face_$Impl_$._new([]);
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		f[i] = this1[i];
	}
	return f;
};
var triangulations_FillShape = function() {
};
triangulations_FillShape.__name__ = true;
triangulations_FillShape.prototype = {
	scale: function(s) {
		var this1 = this.vertices;
		var l = this1.length;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this1[i];
			this1[i] = new khaMath_Vector2(_this.x * s,_this.y * s);
		}
	}
	,translate: function(x,y) {
		var this1 = this.vertices;
		var t = new khaMath_Vector2(x,y);
		var l = this1.length;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			var _this = this1[i];
			this1[i] = new khaMath_Vector2(_this.x + t.x,_this.y + t.y);
		}
	}
	,fit: function(w,h,margin) {
		if(margin == null) {
			margin = 10;
		}
		var this1 = this.vertices;
		var xMin = Infinity;
		var xMax = -Infinity;
		var yMin = Infinity;
		var yMax = -Infinity;
		var l = this1.length;
		var _g1 = 0;
		var _g = this1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = this1[i];
			var x = v.x;
			var y = v.y;
			xMin = Math.min(x,xMin);
			xMax = Math.max(x,xMax);
			yMin = Math.min(y,yMin);
			yMax = Math.max(y,yMax);
		}
		var xdif = xMax - xMin;
		var ydif = yMax - yMin;
		var scaleX = (w - 2 * margin) / xdif;
		var scaleY = (h - 2 * margin) / ydif;
		var scale = Math.min(scaleX,scaleY);
		var marginX = (w - scale * xdif) / 2;
		var marginY = (h - scale * ydif) / 2;
		var _g11 = 0;
		var _g2 = this1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var v1 = this1[i1];
			v1.x = marginX + scale * (v1.x - xMin);
			v1.y = marginY + scale * (v1.y - yMin);
		}
	}
	,set_fixedExternal: function(val) {
		triangulations__$Edges_Edges_$Impl_$.set_fixedExternal(this.edges,val);
	}
	,clone: function() {
		var f = new triangulations_FillShape();
		var this1 = this.edges;
		var v = null;
		var this2;
		if(v == null) {
			v = triangulations__$Edges_Edges_$Impl_$._new([]);
		}
		this2 = v;
		var e = this2;
		var l = this1.length;
		var tempIn;
		var tempOut;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e[i] = this1[i].clone();
		}
		f.edges = e;
		var this3 = this.vertices;
		var v1 = triangulations__$Vertices_Vertices_$Impl_$._new([]);
		var l1 = this3.length;
		var _g11 = 0;
		var _g2 = l1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			v1[i1] = new khaMath_Vector2(this3[i1].x,this3[i1].y);
		}
		f.vertices = v1;
		f.faces = this.cloneFaces();
		return f;
	}
	,cloneFaces: function() {
		var f = [];
		var l0 = this.faces.length;
		var l1;
		var arrFace;
		var _g1 = 0;
		var _g = l0;
		while(_g1 < _g) {
			var i = _g1++;
			var temp = [];
			arrFace = this.faces[i];
			l1 = arrFace.length;
			var _g3 = 0;
			var _g2 = l1;
			while(_g3 < _g2) {
				var j = _g3++;
				var this1 = arrFace[j];
				var f1 = triangulations__$Face_Face_$Impl_$._new([]);
				var l = this1.length;
				var _g11 = 0;
				var _g4 = l;
				while(_g11 < _g4) {
					var i1 = _g11++;
					f1[i1] = this1[i1];
				}
				temp[j] = f1;
			}
			f[i] = temp;
		}
		return f;
	}
	,__class__: triangulations_FillShape
};
var triangulations_FindEnclosingTriangle = function() {
	this.cookie = 0;
	this.enqueued = [];
};
triangulations_FindEnclosingTriangle.__name__ = true;
triangulations_FindEnclosingTriangle.prototype = {
	tryEnqueue: function(ev) {
		var t = triangulations__$TriangleIndex_TriangleIndex_$Impl_$.fromEdgeVertex(ev);
		var out;
		var pq;
		if(ev.vertexId == 0) {
			pq = this.coEdges[ev.edgeId].p;
		} else {
			pq = this.coEdges[ev.edgeId].q;
		}
		if(this.enqueued[t] == this.cookie || pq == null) {
			out = false;
		} else {
			this.queue.enqueue(t);
			var j0 = this.sideEdges[ev.edgeId].getByIndex(ev.vertexId);
			var j1 = this.sideEdges[ev.edgeId].getByIndex(3 - ev.vertexId);
			var jp = this.edges[ev.edgeId].p;
			var this1 = { edgeId : j0, vertexId : this.coEdges[j0].p == jp ? 0 : 1};
			var t0 = triangulations__$TriangleIndex_TriangleIndex_$Impl_$.fromEdgeVertex(this1);
			var this2 = { edgeId : j1, vertexId : this.coEdges[j1].p == jp ? 0 : 1};
			var t1 = triangulations__$TriangleIndex_TriangleIndex_$Impl_$.fromEdgeVertex(this2);
			var tmp = this.enqueued[t0] = this.enqueued[t1] = this.cookie;
			this.enqueued[t] = tmp;
			out = true;
		}
		return out;
	}
	,triangleIndex: function(vertices,edges_,coEdges_,sideEdges_,p,j0) {
		this.edges = edges_;
		this.coEdges = coEdges_;
		this.sideEdges = sideEdges_;
		this.queue = new triangulations_Queue();
		++this.cookie;
		var this1 = { edgeId : j0, vertexId : 0};
		this.tryEnqueue(this1);
		var this2 = { edgeId : j0, vertexId : 1};
		this.tryEnqueue(this2);
		var t_ = null;
		while(!this.queue.isEmpty()) {
			var t = this.queue.dequeue();
			var vertexId = Std["int"](t % 2);
			var edgeId = Std["int"]((t - vertexId) / 2);
			var this3 = { edgeId : edgeId, vertexId : vertexId};
			var ev = this3;
			var ai = this.edges[ev.edgeId].p;
			var a = vertices[ai];
			var bi;
			if(ev.vertexId == 0) {
				bi = this.coEdges[ev.edgeId].p;
			} else {
				bi = this.coEdges[ev.edgeId].q;
			}
			var b = vertices[bi];
			var ci = this.edges[ev.edgeId].q;
			var c = vertices[ci];
			if((triangulations_Geom2.pointInTriangle(a,b,c))(p)) {
				t_ = t;
				break;
			}
			var ja = this.sideEdges[ev.edgeId].getByIndex(ev.vertexId);
			var jc = this.sideEdges[ev.edgeId].getByIndex(3 - ev.vertexId);
			if(this.edges[ja] != null) {
				if(!this.edges[ja].fixed) {
					var this4 = { edgeId : ja, vertexId : this.coEdges[ja].p == ai ? 1 : 0};
					this.tryEnqueue(this4);
				}
			}
			if(this.edges[jc] != null) {
				if(!this.edges[jc].fixed) {
					var this5 = { edgeId : jc, vertexId : this.coEdges[jc].p == ci ? 1 : 0};
					this.tryEnqueue(this5);
				}
			}
		}
		return t_;
	}
	,getFace: function(vertices,edges_,coEdges_,sideEdges_,p,j0) {
		var this1 = this.triangleIndex(vertices,edges_,coEdges_,sideEdges_,p,j0);
		var coEdges = this.coEdges;
		var face = null;
		if(this1 != null) {
			var vertexId = Std["int"](this1 % 2);
			var edgeId = Std["int"]((this1 - vertexId) / 2);
			var this2 = { edgeId : edgeId, vertexId : vertexId};
			var ev = this2;
			face = [edges_[ev.edgeId].p,edges_[ev.edgeId].q,ev.vertexId == 0 ? coEdges[ev.edgeId].p : coEdges[ev.edgeId].q];
		}
		return face;
	}
	,__class__: triangulations_FindEnclosingTriangle
};
var triangulations_Geom2 = function() { };
triangulations_Geom2.__name__ = true;
triangulations_Geom2.inSegment = function(a,b,p) {
	var out = false;
	if(a.x != b.x) {
		if(a.x <= p.x && p.x <= b.x) {
			out = true;
		} else if(a.x >= p.x && p.x >= b.x) {
			out = true;
		}
	} else if(a.y <= p.y && p.y <= b.y) {
		out = true;
	} else if(a.y >= p.y && p.y >= b.y) {
		out = true;
	}
	return out;
};
triangulations_Geom2.pointEncroachesEdge = function(a,b,p) {
	var c = new khaMath_Vector2((a.x + b.x) / 2,(a.y + b.y) / 2);
	var dx = c.x - p.x;
	var dy = c.y - p.y;
	var dx1 = c.x - a.x;
	var dy1 = c.y - a.y;
	return dx * dx + dy * dy <= dx1 * dx1 + dy1 * dy1;
};
triangulations_Geom2.triangleArea = function(a,b,c) {
	return (a.x * (b.y - c.y) + b.x * (c.y - a.y) + c.x * (a.y - b.y)) / 2;
};
triangulations_Geom2.triangleIsBad = function(minAngle,maxArea) {
	minAngle *= Math.PI / 180;
	var sinSqMinAngle = Math.sin(minAngle);
	sinSqMinAngle *= sinSqMinAngle;
	return function(a,b,c) {
		if(triangulations_Geom2.triangleArea(a,b,c) > maxArea) {
			return true;
		}
		var ab = new khaMath_Vector2(b.x - a.x,b.y - a.y);
		var abLenSq = ab.x * ab.x + ab.y * ab.y;
		var ca = new khaMath_Vector2(a.x - c.x,a.y - c.y);
		var caLenSq = ca.x * ca.x + ca.y * ca.y;
		var abxca = ab.x * ca.y - ab.y * ca.x;
		var sinSqcab = abxca * abxca / (abLenSq * caLenSq);
		if(abxca * abxca < sinSqMinAngle * abLenSq * caLenSq) {
			return true;
		}
		var bc = new khaMath_Vector2(c.x - b.x,c.y - b.y);
		var bcLenSq = bc.x * bc.x + bc.y * bc.y;
		var abxbc = ab.x * ab.y - ab.y * ab.x;
		if(abxbc * abxbc < sinSqMinAngle * abLenSq * bcLenSq) {
			return true;
		}
		var bcxca = bc.x * ca.y - bc.y * ca.x;
		return bcxca * bcxca < sinSqMinAngle * bcLenSq * caLenSq;
	};
};
triangulations_Geom2.circumcenter = function(a,b,c) {
	var xa = a.x;
	var ya = a.y;
	var xb = b.x;
	var yb = b.y;
	var xc = c.x;
	var yc = c.y;
	var d = 2 * ((xa - xc) * (yb - yc) - (xb - xc) * (ya - yc));
	var ka = (xa - xc) * (xa + xc) + (ya - yc) * (ya + yc);
	var kb = (xb - xc) * (xb + xc) + (yb - yc) * (yb + yc);
	var xp = ka * (yb - yc) - kb * (ya - yc);
	var yp = kb * (xa - xc) - ka * (xb - xc);
	return new khaMath_Vector2(xp / d,yp / d);
};
triangulations_Geom2.pointInCircumcircle = function(a,b,c,v) {
	var p = triangulations_Geom2.circumcenter(a,b,c);
	var dx = p.x - v.x;
	var dy = p.y - v.y;
	var dx1 = a.x - p.x;
	var dy1 = a.y - p.y;
	return dx * dx + dy * dy < dx1 * dx1 + dy1 * dy1;
};
triangulations_Geom2.edgeVSRay = function(u,v,y) {
	var val;
	if(u.y > v.y) {
		var tmp = u;
		u = v;
		v = tmp;
	}
	if(y <= u.y || v.y < y) {
		val = null;
	} else {
		var t = (y - u.y) / (v.y - u.y);
		val = u.x + t * (v.x - u.x);
	}
	return val;
};
triangulations_Geom2.edgesIntersect = function(a,b,c,d) {
	var out = true;
	var u = new khaMath_Vector2(b.x - a.x,b.y - a.y);
	var v = new khaMath_Vector2(c.x - a.x,c.y - a.y);
	var su = u.x * v.y - u.y * v.x;
	var v1 = new khaMath_Vector2(d.x - a.x,d.y - a.y);
	var su1 = su * (u.x * v1.y - u.y * v1.x);
	if(su1 > 0) {
		out = false;
	} else {
		var v2 = new khaMath_Vector2(d.x - c.x,d.y - c.y);
		var v3 = new khaMath_Vector2(a.x - c.x,a.y - c.y);
		var sv = v2.x * v3.y - v2.y * v3.x;
		var v4 = new khaMath_Vector2(b.x - c.x,b.y - c.y);
		var sv1 = sv * (v2.x * v4.y - v2.y * v4.x);
		if(sv1 > 0) {
			out = false;
		} else if(su1 == 0 && sv1 == 0) {
			var dx = a.x - b.x;
			var dy = a.y - b.y;
			var abLenSq = dx * dx + dy * dy;
			var dx1 = a.x - c.x;
			var dy1 = a.y - c.y;
			if(!(dx1 * dx1 + dy1 * dy1 <= abLenSq)) {
				var dx2 = a.x - d.x;
				var dy2 = a.y - d.y;
				out = dx2 * dx2 + dy2 * dy2 <= abLenSq;
			} else {
				out = true;
			}
		}
	}
	return out;
};
triangulations_Geom2.pointInTriangle = function(a,b,c) {
	var u = new khaMath_Vector2(b.x - a.x,b.y - a.y);
	var v = new khaMath_Vector2(c.x - a.x,c.y - a.y);
	var vxu = v.x * u.y - v.y * u.x;
	var uxv = -vxu;
	return function(p) {
		var w = new khaMath_Vector2(p.x - a.x,p.y - a.y);
		var vxw = v.x * w.y - v.y * w.x;
		if(vxu * vxw < 0) {
			return false;
		}
		var uxw = u.x * w.y - u.y * w.x;
		if(uxv * uxw < 0) {
			return false;
		}
		return Math.abs(uxw) + Math.abs(vxw) <= Math.abs(uxv);
	};
};
triangulations_Geom2.pointToEdgeDistSq = function(u,v) {
	var uv = new khaMath_Vector2(v.x - u.x,v.y - u.y);
	var uvLenSq = uv.x * uv.x + uv.y * uv.y;
	return function(p) {
		var v1 = new khaMath_Vector2(u.x - p.x,u.y - p.y);
		var uvxpu = uv.x * v1.y - uv.y * v1.x;
		return uvxpu * uvxpu / uvLenSq;
	};
};
triangulations_Geom2.angleCompare = function(c,d) {
	var cd = new khaMath_Vector2(d.x - c.x,d.y - c.y);
	return function(u,v) {
		var cu = new khaMath_Vector2(u.x - c.x,u.y - c.y);
		var cv = new khaMath_Vector2(v.x - c.x,v.y - c.y);
		var cvxcu = cv.x * cu.y - cv.y * cu.x;
		if(cvxcu == 0 && cu.x * cv.x + cu.y * cv.y >= 0) {
			return 0;
		}
		var cuxcd = cu.x * cd.y - cu.y * cd.x;
		var cvxcd = cv.x * cd.y - cv.y * cd.x;
		if(cuxcd == 0 && cd.x * cu.x + cd.y * cu.y >= 0) {
			return -1;
		}
		if(cvxcd == 0 && cd.x * cv.x + cd.y * cv.y >= 0) {
			return 1;
		}
		if(cuxcd * cvxcd >= 0) {
			return cvxcu;
		}
		return cuxcd;
	};
};
var triangulations_Queue = function() {
	this.offset = 0;
	this.queue = [];
	this.queue = [];
};
triangulations_Queue.__name__ = true;
triangulations_Queue.prototype = {
	getLength: function() {
		return this.queue.length - this.offset;
	}
	,isEmpty: function() {
		return this.queue.length == 0;
	}
	,enqueue: function(item) {
		this.queue.push(item);
	}
	,dequeue: function() {
		var item = null;
		if(this.queue.length == 0) {
			item = null;
		} else {
			item = this.queue[this.offset];
			if(++this.offset * 2 >= this.queue.length) {
				this.queue = this.queue.slice(this.offset);
				this.offset = 0;
			}
		}
		return item;
	}
	,peak: function() {
		if(this.queue.length > 0) {
			return this.queue[this.offset];
		} else {
			return null;
		}
	}
	,__class__: triangulations_Queue
};
var triangulations_Ruppert = function() { };
triangulations_Ruppert.__name__ = true;
triangulations_Ruppert.arrToBack = function(a,i) {
	var tmp = a[i];
	a[i] = a[a.length - 1];
	a[a.length - 1] = tmp;
};
triangulations_Ruppert.refineTo = function(vertices,edges,coEdges,sideEdges,settings) {
	var encroached = [];
	var bad = [];
	if(settings == null) {
		settings = new triangulations_Settings();
	}
	if(settings.maxSteinerPoints == null) {
		settings.maxSteinerPoints = 50;
	}
	var steinerLeft = settings.maxSteinerPoints;
	var minAngle = settings.minAngle;
	var maxArea = settings.maxArea;
	var isBad = triangulations_Geom2.triangleIsBad(minAngle,maxArea);
	var encroachedEdges = [];
	var badTriangles = [];
	var _g1 = 0;
	var _g = edges.length;
	while(_g1 < _g) {
		var j = _g1++;
		if(edges[j].fixed) {
			encroachedEdges.push(j);
			encroached[j] = true;
		}
		badTriangles.push(j);
		bad[j] = true;
	}
	var count = 0;
	while(steinerLeft > 0 && (encroachedEdges.length > 0 || badTriangles.length > 0)) {
		console.log("ruppert iteratations" + count++);
		var affectedEdges = [];
		var forceSplit = [];
		var traceEntry = { };
		if(encroachedEdges.length > 0) {
			var s = Math.floor(Math.random() * encroachedEdges.length);
			triangulations_Ruppert.arrToBack(encroachedEdges,s);
			var j1 = encroachedEdges.pop();
			encroached[j1] = false;
			if(triangulations_Ruppert.edgeIsEncroached(vertices,edges,coEdges,j1)) {
				affectedEdges = triangulations_Triangulate.splitEdge(vertices,edges,coEdges,sideEdges,j1);
				--steinerLeft;
			}
		} else if(badTriangles.length > 0) {
			var s1 = Math.floor(Math.random() * badTriangles.length);
			triangulations_Ruppert.arrToBack(badTriangles,s1);
			var j2 = badTriangles[badTriangles.length - 1];
			var edge = edges[j2];
			var coEdge = coEdges[j2];
			var a = vertices[edge.p];
			var c = vertices[edge.q];
			var okCnt = 0;
			var coEdgeK;
			var _g2 = 0;
			while(_g2 < 2) {
				var k = _g2++;
				coEdgeK = coEdge.getByIndex(k);
				if(coEdgeK == null) {
					++okCnt;
					continue;
				}
				var b = vertices[coEdgeK];
				if(!isBad(a,b,c)) {
					++okCnt;
					continue;
				}
				var p = triangulations_Geom2.circumcenter(a,b,c);
				var encroachedEdges1 = [];
				var insert = triangulations_Ruppert.tryInsertPoint(vertices,edges,coEdges,sideEdges,encroachedEdges1,p,j2);
				if(insert != null) {
					affectedEdges = insert;
					--steinerLeft;
				} else {
					forceSplit = encroachedEdges1;
				}
				break;
			}
			if(okCnt == 2) {
				badTriangles.pop();
				bad[j2] = false;
			}
		}
		while(forceSplit.length > 0 && steinerLeft > 0) {
			var j3 = forceSplit.pop();
			var affectedEdgesPart = triangulations_Triangulate.splitEdge(vertices,edges,coEdges,sideEdges,j3);
			triangulations_Ruppert.addArrayInt(affectedEdges,affectedEdgesPart);
			--steinerLeft;
		}
		while(affectedEdges.length > 0) {
			var j4 = affectedEdges.pop();
			if(edges[j4].fixed && !encroached[j4]) {
				encroachedEdges.push(j4);
				encroached[j4] = true;
			}
			if(!bad[j4]) {
				badTriangles.push(j4);
				bad[j4] = true;
			}
		}
	}
};
triangulations_Ruppert.addArrayInt = function(e0,e1) {
	var l = e0.length;
	var el = e1.length;
	var _g1 = 0;
	var _g = el;
	while(_g1 < _g) {
		var i = _g1++;
		e0[l + i] = e1[i];
	}
	return e0;
};
triangulations_Ruppert.tryInsertPoint = function(vertices,edges,coEdges,sideEdges,encroachedEdges,p,j0) {
	var findTri = new triangulations_FindEnclosingTriangle();
	var t = findTri.triangleIndex(vertices,edges,coEdges,sideEdges,p,j0);
	if(t == null) {
		return null;
	}
	var vertexId = Std["int"](t % 2);
	var edgeId = Std["int"]((t - vertexId) / 2);
	var this1 = { edgeId : edgeId, vertexId : vertexId};
	var ev = this1;
	var edgeId1 = ev.edgeId;
	var vertexId1 = ev.vertexId;
	var edge = edges[edgeId1];
	var coEdge = coEdges[edgeId1];
	var ai = edge.p;
	var a = vertices[ai];
	var bcj = sideEdges[edgeId1].getByIndex(vertexId1);
	var bi = coEdge.getByIndex(vertexId1);
	var b = vertices[bi];
	var caj = edgeId1;
	var ci = edge.q;
	var c = vertices[ci];
	var abj = sideEdges[edgeId1].getByIndex(3 - vertexId1);
	if(edges[bcj].fixed && triangulations_Geom2.pointEncroachesEdge(b,c,p)) {
		encroachedEdges.push(bcj);
	}
	if(edges[caj].fixed && triangulations_Geom2.pointEncroachesEdge(c,a,p)) {
		encroachedEdges.push(caj);
	}
	if(edges[abj].fixed && triangulations_Geom2.pointEncroachesEdge(a,b,p)) {
		encroachedEdges.push(abj);
	}
	if(encroachedEdges.length > 0) {
		return null;
	}
	vertices.push(p);
	var pi = vertices.length - 1;
	edges.push(new triangulations_Edge(pi,ai));
	var paj = edges.length - 1;
	edges.push(new triangulations_Edge(pi,bi));
	var pbj = edges.length - 1;
	edges.push(new triangulations_Edge(pi,ci));
	var pcj = edges.length - 1;
	coEdges[paj] = new triangulations_Edge(bi,ci);
	sideEdges[paj] = new triangulations_SideEdge(abj,caj,pcj,pbj);
	coEdges[pbj] = new triangulations_Edge(ci,ai);
	sideEdges[pbj] = new triangulations_SideEdge(bcj,abj,paj,pcj);
	coEdges[pcj] = new triangulations_Edge(ai,bi);
	sideEdges[pcj] = new triangulations_SideEdge(caj,bcj,pbj,paj);
	coEdges[bcj].substitute(ai,pi);
	sideEdges[bcj].substitute(caj,pcj);
	sideEdges[bcj].substitute(abj,pbj);
	coEdges[caj].substitute(bi,pi);
	sideEdges[caj].substitute(abj,paj);
	sideEdges[caj].substitute(bcj,pcj);
	coEdges[abj].substitute(ci,pi);
	sideEdges[abj].substitute(bcj,pbj);
	sideEdges[abj].substitute(caj,paj);
	var unsureEdges = [];
	if(!edges[bcj].fixed) {
		unsureEdges.push(bcj);
	}
	if(!edges[caj].fixed) {
		unsureEdges.push(caj);
	}
	if(!edges[abj].fixed) {
		unsureEdges.push(abj);
	}
	var delaunay = new triangulations_Delaunay();
	return delaunay.calculate(vertices,edges,coEdges,sideEdges,unsureEdges);
};
triangulations_Ruppert.edgeIsEncroached = function(vertices,edges,coEdges,edgeId) {
	var edge = edges[edgeId];
	var coEdge = coEdges[edgeId];
	var a = vertices[edge.p];
	var c = vertices[edge.q];
	var p = new khaMath_Vector2((a.x + c.x) / 2,(a.y + c.y) / 2);
	var dx = p.x - a.x;
	var dy = p.y - a.y;
	var rSq = dx * dx + dy * dy;
	var tmp;
	if(coEdge.p != null) {
		var v = vertices[coEdge.p];
		var dx1 = p.x - v.x;
		var dy1 = p.y - v.y;
		tmp = dx1 * dx1 + dy1 * dy1 <= rSq;
	} else {
		tmp = false;
	}
	if(!tmp) {
		if(coEdge.q != null) {
			var v1 = vertices[coEdge.q];
			var dx2 = p.x - v1.x;
			var dy2 = p.y - v1.y;
			return dx2 * dx2 + dy2 * dy2 <= rSq;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var triangulations_Settings = function() {
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Vertices_Vertices_$Impl_$._new([]);
	}
	this1 = v;
	this.vertices = this1;
	var v1 = null;
	var this2;
	if(v1 == null) {
		v1 = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this2 = v1;
	this.edges = this2;
	this.defaults();
};
triangulations_Settings.__name__ = true;
triangulations_Settings.prototype = {
	defaults: function() {
		this.k = 10;
		this.g = 10;
		this.d = 0.5;
		this.yMax = 100;
		this.maxSteinerPoints = 50;
		this.minAngle = 20;
		this.maxArea = 1e30;
	}
	,__class__: triangulations_Settings
};
var triangulations_SideEdge = function(a_,b_,c_,d_) {
	this.count = 0;
	this.length = 4;
	this.a = a_;
	this.b = b_;
	this.c = c_;
	this.d = d_;
};
triangulations_SideEdge.__name__ = true;
triangulations_SideEdge.getEmpty = function() {
	var sideEdge = new triangulations_SideEdge(null,null,null,null);
	return sideEdge;
};
triangulations_SideEdge.prototype = {
	iterator: function() {
		this.count = 0;
		return this;
	}
	,push: function(val) {
		if(this.a == null) {
			this.a = val;
		} else if(this.b == null) {
			this.b = val;
		} else if(this.c == null) {
			this.c = val;
		} else if(this.d == null) {
			this.d = val;
		} else {
			throw new js__$Boot_HaxeError("Error SideEdge already full can't push");
		}
	}
	,hasNext: function() {
		return this.count < this.length;
	}
	,next: function() {
		var out;
		var _g = this.count;
		switch(_g) {
		case 0:
			out = this.a;
			break;
		case 1:
			out = this.b;
			break;
		case 2:
			out = this.c;
			break;
		case 3:
			out = this.d;
			break;
		default:
			out = this.a;
		}
		this.count++;
		return out;
	}
	,getByIndex: function(i) {
		var out;
		switch(i) {
		case 0:
			out = this.a;
			break;
		case 1:
			out = this.b;
			break;
		case 2:
			out = this.c;
			break;
		case 3:
			out = this.d;
			break;
		default:
			out = this.a;
		}
		return out;
	}
	,substitute: function(x,y) {
		if(x == this.a) {
			this.a = y;
		} else if(x == this.b) {
			this.b = y;
		} else if(x == this.c) {
			this.c = y;
		} else {
			this.d = y;
		}
	}
	,__class__: triangulations_SideEdge
};
var triangulations__$TriangleIndex_TriangleIndex_$Impl_$ = {};
triangulations__$TriangleIndex_TriangleIndex_$Impl_$.__name__ = true;
triangulations__$TriangleIndex_TriangleIndex_$Impl_$._new = function(t) {
	var this1 = t;
	return this1;
};
triangulations__$TriangleIndex_TriangleIndex_$Impl_$.edgeVertexTriangle = function(this1) {
	var vertexId = Std["int"](this1 % 2);
	var edgeId = Std["int"]((this1 - vertexId) / 2);
	var this2 = { edgeId : edgeId, vertexId : vertexId};
	return this2;
};
triangulations__$TriangleIndex_TriangleIndex_$Impl_$.fromEdgeVertex = function(ev) {
	var this1 = 2 * ev.edgeId + ev.vertexId;
	return this1;
};
triangulations__$TriangleIndex_TriangleIndex_$Impl_$.getFace = function(this1,edges,coEdges) {
	var face = null;
	if(this1 != null) {
		var vertexId = Std["int"](this1 % 2);
		var edgeId = Std["int"]((this1 - vertexId) / 2);
		var this2 = { edgeId : edgeId, vertexId : vertexId};
		var ev = this2;
		face = [edges[ev.edgeId].p,edges[ev.edgeId].q,ev.vertexId == 0 ? coEdges[ev.edgeId].p : coEdges[ev.edgeId].q];
	}
	return face;
};
var triangulations_Triangulate = function() { };
triangulations_Triangulate.__name__ = true;
triangulations_Triangulate.triangulateSimple = function(vertices,edges,face) {
	var _g1 = 0;
	var _g = face.length;
	while(_g1 < _g) {
		var k = _g1++;
		var diags = triangulations_Triangulate.triangulateFace(vertices,face[k]);
		var l = edges.length;
		var el = diags.length;
		var _g11 = 0;
		var _g2 = el;
		while(_g11 < _g2) {
			var i = _g11++;
			edges[l + i] = diags[i];
		}
	}
};
triangulations_Triangulate.triangulateFace = function(vertices,face) {
	var polies = [triangulations_Triangulate.makeLinkedPoly(face[0])];
	var holes = [];
	var l = face.length;
	var _g1 = 1;
	var _g = l;
	while(_g1 < _g) {
		var k = _g1++;
		holes.push(triangulations_Triangulate.makeLinkedPoly(face[k]));
	}
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this1 = v;
	var diagonals = this1;
	while(polies.length > 0) {
		var poly = polies.pop();
		var node = poly;
		var a;
		var b;
		var c;
		var convex = false;
		while(true) {
			a = vertices[node.prev.value];
			b = vertices[node.value];
			c = vertices[node.next.value];
			var _this = new khaMath_Vector2(b.x - a.x,b.y - a.y);
			var v1 = new khaMath_Vector2(c.x - b.x,c.y - b.y);
			convex = _this.x * v1.y - _this.y * v1.x < 0;
			node = node.next;
			if(!(!convex && node != poly)) {
				break;
			}
		}
		if(!convex) {
			continue;
		}
		var aDllNode = node.prev.prev;
		var bDllNode = node.prev;
		var cDllNode = node;
		var acOK = true;
		var inabc = triangulations_Geom2.pointInTriangle(a,b,c);
		if(!inabc(vertices[aDllNode.prev.value])) {
			acOK = !inabc(vertices[cDllNode.next.value]);
		} else {
			acOK = false;
		}
		if(acOK) {
			acOK = !triangulations_Triangulate.intersects(a,c,vertices,cDllNode.next,aDllNode.prev);
		}
		var holesLen = holes.length;
		var _g11 = 0;
		var _g2 = holesLen;
		while(_g11 < _g2) {
			var l1 = _g11++;
			acOK = !triangulations_Triangulate.intersects(a,c,vertices,holes[l1]);
			if(!acOK) {
				break;
			}
		}
		var split;
		var fromDllNode;
		var toDllNode;
		if(acOK) {
			fromDllNode = cDllNode;
			toDllNode = aDllNode;
			split = true;
		} else {
			var findBest = triangulations_Triangulate.findDeepestInside(a,b,c);
			var best = cDllNode.next != aDllNode ? findBest(vertices,cDllNode.next,aDllNode) : null;
			var lHole = -1;
			var holesLen1 = holes.length;
			var _g12 = 0;
			var _g3 = holesLen1;
			while(_g12 < _g3) {
				var l2 = _g12++;
				var newBest = findBest(vertices,holes[l2],holes[l2],best);
				if(newBest != best) {
					lHole = l2;
				}
				best = newBest;
			}
			fromDllNode = bDllNode;
			toDllNode = best;
			if(lHole < 0) {
				split = true;
			} else {
				holes.splice(lHole,1);
				split = false;
			}
		}
		if(toDllNode == null) {
			continue;
		}
		diagonals.push(new triangulations_Edge(fromDllNode.value,toDllNode.value));
		var poly1 = new triangulations_DllNode(fromDllNode.value);
		poly1.next = fromDllNode.next;
		var tempDllNode = new triangulations_DllNode(toDllNode.value);
		tempDllNode.prev = toDllNode.prev;
		tempDllNode.next = poly1;
		poly1.prev = tempDllNode;
		fromDllNode.next.prev = poly1;
		toDllNode.prev.next = poly1.prev;
		fromDllNode.next = toDllNode;
		toDllNode.prev = fromDllNode;
		var poly2 = fromDllNode;
		if(split) {
			polies.push(poly1);
			polies.push(poly2);
		} else {
			polies.push(poly2);
		}
	}
	return diagonals;
};
triangulations_Triangulate.makeLinkedPoly = function(face) {
	var linkedPoly = new triangulations_DllNode(face[0]);
	var node = linkedPoly;
	var l = face.length;
	var _g1 = 1;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var prevDllNode = node;
		node = new triangulations_DllNode(face[i]);
		prevDllNode.next = node;
		node.prev = prevDllNode;
	}
	node.next = linkedPoly;
	linkedPoly.prev = node;
	return linkedPoly;
};
triangulations_Triangulate.intersects = function(a,b,vertices,nodeBeg,nodeEnd) {
	var out = false;
	if(nodeEnd == null) {
		if(triangulations_Triangulate.aux(vertices,a,b,nodeBeg)) {
			out = true;
		} else {
			nodeEnd = nodeBeg;
			nodeBeg = nodeBeg.next;
		}
	}
	if(out != true) {
		var node = nodeBeg;
		while(node != nodeEnd) if(triangulations_Triangulate.aux(vertices,a,b,node)) {
			out = true;
			break;
		} else {
			node = node.next;
		}
	}
	return out;
};
triangulations_Triangulate.aux = function(vertices,a,b,node) {
	var c = vertices[node.value];
	var d = vertices[node.next.value];
	if(c != a && c != b && d != a && d != b) {
		return triangulations_Geom2.edgesIntersect(a,b,c,d);
	} else {
		return false;
	}
};
triangulations_Triangulate.findDeepestInside = function(a,b,c) {
	var inabc = triangulations_Geom2.pointInTriangle(a,b,c);
	var acDistSq = triangulations_Geom2.pointToEdgeDistSq(a,c);
	return function(vertices,nodeBeg,nodeEnd,bestDllNode) {
		var v;
		var maxDepthSq;
		if(bestDllNode != null) {
			v = bestDllNode.value;
			maxDepthSq = acDistSq(vertices[v]);
		} else {
			maxDepthSq = -1;
		}
		var node = nodeBeg;
		while(true) {
			var v1 = vertices[node.value];
			if(v1 != a && v1 != b && v1 != c && inabc(v1)) {
				var depthSq = acDistSq(v1);
				if(depthSq > maxDepthSq) {
					maxDepthSq = depthSq;
					bestDllNode = node;
				}
			}
			node = node.next;
			if(!(node != nodeEnd)) {
				break;
			}
		}
		return bestDllNode;
	};
};
triangulations_Triangulate.makeQuadEdge = function(vertices,edges,coEdges,sideEdges) {
	var _g1 = 0;
	var _g = edges.length;
	while(_g1 < _g) {
		var j = _g1++;
		coEdges[j] = new triangulations_Edge(null,null);
		sideEdges[j] = triangulations_SideEdge.getEmpty();
	}
	var outEdges = [];
	var _g11 = 0;
	var _g2 = vertices.length;
	while(_g11 < _g2) {
		var i = _g11++;
		outEdges[i] = [];
	}
	var _g12 = 0;
	var _g3 = edges.length;
	while(_g12 < _g3) {
		var j1 = _g12++;
		var e = edges[j1];
		outEdges[e.p].push(j1);
		outEdges[e.q].push(j1);
	}
	var l = vertices.length;
	var _g13 = 0;
	var _g4 = l;
	while(_g13 < _g4) {
		var i1 = _g13++;
		var v = vertices[i1];
		var js = outEdges[i1];
		var _g31 = 0;
		var _g21 = js.length;
		while(_g31 < _g21) {
			var k = _g31++;
			var e1 = edges[js[k]];
			if(e1.p != i1) {
				e1.q = e1.p;
				e1.p = i1;
			}
		}
		var angleCmp = [triangulations_Geom2.angleCompare(v,vertices[edges[js[0]].q])];
		js.sort((function(angleCmp1) {
			return function(j11,j2) {
				return Std["int"](angleCmp1[0](vertices[edges[j11].q],vertices[edges[j2].q]));
			};
		})(angleCmp));
		var _g32 = 0;
		var _g22 = js.length;
		while(_g32 < _g22) {
			var k1 = _g32++;
			var jPrev = js[(js.length + k1 - 1) % js.length];
			var j3 = js[k1];
			var jNext = js[(k1 + 1) % js.length];
			coEdges[j3].push(edges[jPrev].q);
			sideEdges[j3].push(jPrev);
			sideEdges[j3].push(jNext);
		}
	}
	var disjoint = function(i2,j4) {
		if(edges[j4].p != i2) {
			return edges[j4].q != i2;
		} else {
			return false;
		}
	};
	var _g14 = 0;
	var _g5 = edges.length;
	while(_g14 < _g5) {
		var j5 = _g14++;
		if(!edges[j5].external) {
			continue;
		}
		var ce = coEdges[j5];
		var ses = sideEdges[j5];
		if(ce.p == ce.q) {
			ce.q = ses.b = ses.c = null;
			continue;
		}
		if(edges[ses.a].external && edges[ses.d].external) {
			ce.p = ses.a = ses.d = null;
		}
		if(edges[ses.b].external && edges[ses.c].external) {
			ce.q = ses.b = ses.c = null;
		}
	}
};
triangulations_Triangulate.faceFromDllNode = function(linkedPoly) {
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Face_Face_$Impl_$._new([]);
	}
	this1 = v;
	var face = this1;
	var node = linkedPoly;
	var l = 0;
	while(true) {
		face[l] = node.value;
		++l;
		node = node.next;
		if(!(node != linkedPoly)) {
			break;
		}
	}
	return face;
};
triangulations_Triangulate.splitEdge = function(vertices,edges,coEdges,sideEdges,j) {
	var edge = edges[j];
	var coEdge = coEdges[j];
	var ia = edge.p;
	var ic = edge.q;
	var ib = coEdge.p;
	var id = coEdge.q;
	var _this = vertices[ia];
	var v = vertices[ic];
	var p = new khaMath_Vector2((_this.x + v.x) / 2,(_this.y + v.y) / 2);
	var unsureEdges = [];
	vertices.push(p);
	var ip = vertices.length - 1;
	edges[j] = new triangulations_Edge(ia,ip);
	var ja = j;
	edges.push(new triangulations_Edge(ip,ic));
	var jc = edges.length - 1;
	var jb = null;
	var j0 = null;
	var j3 = null;
	if(ib != null) {
		edges.push(new triangulations_Edge(ib,ip));
		jb = edges.length - 1;
		j0 = sideEdges[j].a;
		j3 = sideEdges[j].d;
		coEdges[j0].substitute(ia,ip);
		sideEdges[j0].substitute(j,jc);
		sideEdges[j0].substitute(j3,jb);
		coEdges[j3].substitute(ic,ip);
		sideEdges[j3].substitute(j0,jb);
		coEdges[jb] = new triangulations_Edge(ia,ic);
		sideEdges[jb] = new triangulations_SideEdge(ja,jc,j0,j3);
		if(!edges[j0].fixed) {
			unsureEdges.push(j0);
		}
		if(!edges[j3].fixed) {
			unsureEdges.push(j3);
		}
	}
	var jd = null;
	var j1 = null;
	var j2 = null;
	if(id != null) {
		edges.push(new triangulations_Edge(ip,id));
		jd = edges.length - 1;
		j1 = sideEdges[j].b;
		j2 = sideEdges[j].c;
		coEdges[j1].substitute(ia,ip);
		sideEdges[j1].substitute(j,jc);
		sideEdges[j1].substitute(j2,jd);
		coEdges[j2].substitute(ic,ip);
		sideEdges[j2].substitute(j1,jd);
		coEdges[jd] = new triangulations_Edge(ia,ic);
		sideEdges[jd] = new triangulations_SideEdge(j2,j1,jc,ja);
		if(!edges[j1].fixed) {
			unsureEdges.push(j1);
		}
		if(!edges[j2].fixed) {
			unsureEdges.push(j2);
		}
	}
	sideEdges[ja] = new triangulations_SideEdge(jb,jd,j2,j3);
	coEdges[jc] = new triangulations_Edge(ib,id);
	sideEdges[jc] = new triangulations_SideEdge(j0,j1,jd,jb);
	if(edge.fixed) {
		edges[ja].fixed = true;
		edges[jc].fixed = true;
	}
	if(edge.external) {
		edges[ja].external = true;
		edges[jc].external = true;
	}
	var delaunay = new triangulations_Delaunay();
	var affectedEdges = delaunay.calculate(vertices,edges,coEdges,sideEdges,unsureEdges);
	affectedEdges.push(ja);
	affectedEdges.push(jc);
	if(jb != null) {
		affectedEdges.push(jb);
	}
	if(jd != null) {
		affectedEdges.push(jd);
	}
	return affectedEdges;
};
var triangulations__$Vertices_Vertices_$Impl_$ = {};
triangulations__$Vertices_Vertices_$Impl_$.__name__ = true;
triangulations__$Vertices_Vertices_$Impl_$._new = function(v) {
	var this1;
	if(v == null) {
		v = triangulations__$Vertices_Vertices_$Impl_$._new([]);
	}
	this1 = v;
	return this1;
};
triangulations__$Vertices_Vertices_$Impl_$.getEmpty = function() {
	return triangulations__$Vertices_Vertices_$Impl_$._new([]);
};
triangulations__$Vertices_Vertices_$Impl_$.scale = function(this1,f) {
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var _this = this1[i];
		this1[i] = new khaMath_Vector2(_this.x * f,_this.y * f);
	}
};
triangulations__$Vertices_Vertices_$Impl_$.translate = function(this1,x,y) {
	var t = new khaMath_Vector2(x,y);
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var _this = this1[i];
		this1[i] = new khaMath_Vector2(_this.x + t.x,_this.y + t.y);
	}
};
triangulations__$Vertices_Vertices_$Impl_$.polygonOrientation = function(this1,poly) {
	var area = 0.;
	var l = poly.length;
	var v = this1[poly[l - 1]];
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var u = v;
		v = this1[poly[i]];
		area += (u.x + v.x) * (u.y - v.y);
	}
	if(area > 0) {
		return 1;
	} else if(area < 0) {
		return -1;
	} else {
		return 0;
	}
};
triangulations__$Vertices_Vertices_$Impl_$.pointInPolygon = function(this1,poly,w) {
	var l = poly.length;
	var v = this1[poly[l - 1]];
	var result = false;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		var u = v;
		v = this1[poly[i]];
		if(u.y == v.y) {
			var wux = w.x - u.x;
			if(u.y == w.y && wux * wux <= 0) {
				return false;
			}
			continue;
		} else {
			var x = triangulations_Geom2.edgeVSRay(u,v,w.y);
			if(x != null && w.x > x) {
				result = !result;
			}
		}
	}
	return result;
};
triangulations__$Vertices_Vertices_$Impl_$.clone = function(this1) {
	var v = triangulations__$Vertices_Vertices_$Impl_$._new([]);
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		v[i] = new khaMath_Vector2(this1[i].x,this1[i].y);
	}
	return v;
};
triangulations__$Vertices_Vertices_$Impl_$.fitClone = function(this1,width,height,margin) {
	if(margin == null) {
		margin = 10;
	}
	var v = triangulations__$Vertices_Vertices_$Impl_$._new([]);
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		v[i] = new khaMath_Vector2(this1[i].x,this1[i].y);
	}
	var v1 = v;
	var xMin = Infinity;
	var xMax = -Infinity;
	var yMin = Infinity;
	var yMax = -Infinity;
	var l1 = this1.length;
	var _g11 = 0;
	var _g2 = this1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var v2 = this1[i1];
		var x = v2.x;
		var y = v2.y;
		xMin = Math.min(x,xMin);
		xMax = Math.max(x,xMax);
		yMin = Math.min(y,yMin);
		yMax = Math.max(y,yMax);
	}
	var xdif = xMax - xMin;
	var ydif = yMax - yMin;
	var scaleX = (width - 2 * margin) / xdif;
	var scaleY = (height - 2 * margin) / ydif;
	var scale = Math.min(scaleX,scaleY);
	var marginX = (width - scale * xdif) / 2;
	var marginY = (height - scale * ydif) / 2;
	var _g12 = 0;
	var _g3 = this1.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var v3 = this1[i2];
		v3.x = marginX + scale * (v3.x - xMin);
		v3.y = marginY + scale * (v3.y - yMin);
	}
	return v1;
};
triangulations__$Vertices_Vertices_$Impl_$.fit = function(this1,width,height,margin) {
	if(margin == null) {
		margin = 10;
	}
	var xMin = Infinity;
	var xMax = -Infinity;
	var yMin = Infinity;
	var yMax = -Infinity;
	var l = this1.length;
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = this1[i];
		var x = v.x;
		var y = v.y;
		xMin = Math.min(x,xMin);
		xMax = Math.max(x,xMax);
		yMin = Math.min(y,yMin);
		yMax = Math.max(y,yMax);
	}
	var xdif = xMax - xMin;
	var ydif = yMax - yMin;
	var scaleX = (width - 2 * margin) / xdif;
	var scaleY = (height - 2 * margin) / ydif;
	var scale = Math.min(scaleX,scaleY);
	var marginX = (width - scale * xdif) / 2;
	var marginY = (height - scale * ydif) / 2;
	var _g11 = 0;
	var _g2 = this1.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		var v1 = this1[i1];
		v1.x = marginX + scale * (v1.x - xMin);
		v1.y = marginY + scale * (v1.y - yMin);
	}
};
triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray = function(arr) {
	var v = triangulations__$Vertices_Vertices_$Impl_$._new([]);
	var arr2;
	var l = arr.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		arr2 = arr[i];
		v[i] = new khaMath_Vector2(arr2[0],arr2[1]);
	}
	return v;
};
var triangulationsWebGLtest_MainTestSetup = function() {
	this.toggle12 = false;
	this.splitId = null;
	this.allShapes = new triangulationsWebGLtest_fillShapes_AllShapes();
	this.draw = new triangulationsWebGLtest_helpers_Draw();
	this.interactionSurface = new justTrianglesWebGL_InteractionSurface(1024,1024,"0xcccccc");
	this.navSetup();
	this.interactionSurface.bg.addEventListener("mousedown",$bind(this,this.mouseDown));
};
triangulationsWebGLtest_MainTestSetup.__name__ = true;
triangulationsWebGLtest_MainTestSetup.main = function() {
	new triangulationsWebGLtest_MainTestSetup();
};
triangulationsWebGLtest_MainTestSetup.prototype = {
	mouseDown: function(e) {
		var p = new khaMath_Vector2(e.clientX * 2,e.clientY * 2);
		if(this.edgesVertices == null) {
			return;
		}
		var i = this.edgesVertices.hitTestId(p,50);
		if(i == null) {
			return;
		}
		if(i < 0) {
			i = -i - 1;
			console.log("edge found " + i);
			if(this.scene == 6) {
				if(i == 12) {
					this.toggle12 = !this.toggle12;
					console.log("toggle ");
					this.draw.render();
				}
			} else if(this.scene == 9) {
				this.splitId = i;
				this.draw.render();
			}
		} else {
			console.log("vertex found " + i);
		}
	}
	,navSetup: function() {
		var startScene = Std.parseInt("0");
		var maxScene = 10;
		var mouseScenes = [8];
		this.nav = new triangulationsWebGLtest_helpers_Nav(startScene,maxScene,mouseScenes);
		this.nav.onSceneChange = $bind(this,this.sceneSetup);
		this.nav.setTransform = $bind(this,this.animateAssign);
		this.nav.mouseMoveUpdate = ($_=this.draw,$bind($_,$_.render));
		this.nav.start();
	}
	,animateAssign: function(animation) {
		this.draw.webgl.transformationFunc = animation;
	}
	,sceneSetup: function(val) {
		this.scene = val;
		this.draw.showInstructions = true;
		var _g = this.scene;
		var tmp;
		switch(_g) {
		case 0:
			console.log("banana test");
			tmp = this.allShapes.banana;
			break;
		case 1:
			console.log("edge intersect");
			tmp = this.allShapes.edgeIntersectShape;
			break;
		case 2:
			console.log("poly in point");
			tmp = this.allShapes.pointInPolyShape;
			break;
		case 3:
			console.log("angle compare");
			tmp = this.allShapes.angleCompareShape;
			break;
		case 4:
			console.log("point in Triangle");
			tmp = this.allShapes.pointInTriangleShape;
			break;
		case 5:
			console.log("triangulate test");
			tmp = this.allShapes.triangulateShape;
			break;
		case 6:
			console.log("quad edge test");
			tmp = this.allShapes.quadEdgeShape;
			break;
		case 7:
			console.log("delaunay test");
			tmp = this.allShapes.delaunayShape;
			break;
		case 8:
			console.log("enclosing triangle test");
			tmp = this.allShapes.enclosingTriangleShape;
			break;
		case 9:
			console.log("split test");
			tmp = this.allShapes.splitShape;
			break;
		case 10:
			console.log("ruppert test");
			tmp = this.allShapes.triangulateShape;
			break;
		default:
			console.log("no test");
			tmp = null;
		}
		this.currShape = tmp;
		var vert = this.currShape != null ? this.currShape.vertices : null;
		if(this.currShape != null) {
			this.edgesVertices = triangulations_EdgesVertices.fromShape(this.currShape);
		}
		var _g1 = this.scene;
		var tmp1;
		switch(_g1) {
		case 0:
			tmp1 = $bind(this,this.bananaTest);
			break;
		case 1:
			tmp1 = $bind(this,this.edgeIntersectTest);
			break;
		case 2:
			tmp1 = $bind(this,this.pointInPolyTest);
			break;
		case 3:
			tmp1 = $bind(this,this.angleCompareTest);
			break;
		case 4:
			tmp1 = $bind(this,this.pointInTriangleTest);
			break;
		case 5:
			tmp1 = $bind(this,this.triangulateTest);
			break;
		case 6:
			tmp1 = $bind(this,this.quadEdgeTest);
			break;
		case 7:
			tmp1 = $bind(this,this.delaunayTest);
			break;
		case 8:
			tmp1 = $bind(this,this.enclosingTriangleTest);
			break;
		case 9:
			tmp1 = $bind(this,this.splitTest);
			break;
		case 10:
			tmp1 = $bind(this,this.ruppertTest);
			break;
		default:
			tmp1 = $bind(this,this.bananaTest);
		}
		this.draw.testScene = tmp1;
		this.draw.render();
		this.interactionSurface.setup(vert,$bind(this,this.transform),($_=this.draw,$bind($_,$_.render)));
	}
	,pointInPolyTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestPointInPoly.draw(this.allShapes.pointInPolyShape.clone(),this.draw);
	}
	,angleCompareTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestAngleCompare.draw(this.allShapes.angleCompareShape.clone(),this.draw);
	}
	,pointInTriangleTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestPointInTriangle.draw(this.allShapes.pointInTriangleShape.clone(),this.draw);
	}
	,edgeIntersectTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestEdgeIntersect.draw(this.allShapes.edgeIntersectShape.clone(),this.draw);
	}
	,triangulateTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestTriangulate.draw(this.allShapes.triangulateShape.clone(),this.draw);
	}
	,quadEdgeTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestQuadEdge.draw(this.allShapes.quadEdgeShape.clone(),this.draw,this.toggle12);
	}
	,delaunayTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestDelaunay.draw(this.allShapes.delaunayShape.clone(),this.draw);
	}
	,enclosingTriangleTest: function() {
		this.shape = this.allShapes.enclosingTriangleShape.clone();
		this.vert = this.shape.vertices;
		var face = this.shape.faces;
		var edges = this.shape.edges;
		this.ctx = new justTriangles_PathContext(1,1024,0,0);
		this.draw.titleTextBlue("Enclosing Triangle test",this.ctx);
		this.draw.textViolet("rollover to detect",this.ctx,850,200);
		this.draw.textViolet("which triangle your in",this.ctx,900,280);
		this.ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
		var thick = 4;
		this.ctx.setThickness(4);
		this.ctx.setColor(4,3);
		this.ctx.fill = true;
		var diags = triangulations_Triangulate.triangulateFace(this.vert,face[0]);
		var v = null;
		var this1;
		if(v == null) {
			v = triangulations__$Edges_Edges_$Impl_$._new([]);
		}
		this1 = v;
		var e = this1;
		var l = edges.length;
		var tempIn;
		var tempOut;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e[i] = edges[i].clone();
		}
		var this2 = e;
		var l1 = this2.length;
		var el = diags.length;
		var _g11 = 0;
		var _g2 = el;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this2[l1 + i1] = diags[i1];
		}
		this.all = this2;
		var v1 = null;
		var this3;
		if(v1 == null) {
			v1 = triangulations__$Edges_Edges_$Impl_$._new([]);
		}
		this3 = v1;
		this.coEdges = this3;
		this.sideEdges = [];
		triangulations_Triangulate.makeQuadEdge(this.vert,this.all,this.coEdges,this.sideEdges);
		this.ctx.moveTo(0,0);
		this.draw.faces(this.shape,this.ctx,false);
		this.ctx.setColor(0);
		this.ctx.fill = true;
		this.ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
		this.draw.verticesPoints(this.shape,this.ctx,-1,1,5);
		this.ctx.render(thick,false);
		this.encloseTriangleDraw();
	}
	,encloseTriangleDraw: function() {
		var p = new khaMath_Vector2(this.nav.mX,this.nav.mY);
		var ctx2 = new justTriangles_PathContext(1,1024,0,0);
		var thick = 4;
		ctx2.setThickness(4);
		var findTri = new triangulations_FindEnclosingTriangle();
		var triangle = findTri.getFace(this.vert,this.all,this.coEdges,this.sideEdges,p,0);
		ctx2.setColor(7,7);
		ctx2.fill = true;
		if(triangle != null) {
			this.draw.face(triangle,this.shape,ctx2,false);
		}
		ctx2.render(thick,false);
	}
	,ruppertTest: function() {
		this.shape = this.allShapes.triangulateShape.clone();
		var vert = this.shape.vertices;
		var face = this.shape.faces;
		var edges = this.shape.edges;
		var diags = triangulations_Triangulate.triangulateFace(vert,face[0]);
		var v = null;
		var this1;
		if(v == null) {
			v = triangulations__$Edges_Edges_$Impl_$._new([]);
		}
		this1 = v;
		var e = this1;
		var l = edges.length;
		var tempIn;
		var tempOut;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e[i] = edges[i].clone();
		}
		var this2 = e;
		var l1 = this2.length;
		var el = diags.length;
		var _g11 = 0;
		var _g2 = el;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this2[l1 + i1] = diags[i1];
		}
		var all = this2;
		var v1 = null;
		var this3;
		if(v1 == null) {
			v1 = triangulations__$Edges_Edges_$Impl_$._new([]);
		}
		this3 = v1;
		var coEdges = this3;
		var sideEdges = [];
		triangulations_Triangulate.makeQuadEdge(vert,all,coEdges,sideEdges);
		var delaunay = new triangulations_Delaunay();
		delaunay.refineToDelaunay(vert,all,coEdges,sideEdges);
		var setting = new triangulations_Settings();
		setting.maxSteinerPoints = 50;
		setting.minAngle = 20;
		triangulations_Ruppert.refineTo(vert,all,coEdges,sideEdges,setting);
		this.ctx = new justTriangles_PathContext(1,1024,0,0);
		this.draw.titleTextBlue("Ruppert test",this.ctx);
		this.ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
		var thick = 4;
		this.ctx.setThickness(4);
		this.ctx.setColor(4,3);
		this.ctx.fill = true;
		this.ctx.moveTo(0,0);
		this.draw.edges(all,this.shape,this.ctx,true);
		this.ctx.setColor(0,3);
		this.draw.faces(this.shape,this.ctx,false);
		this.ctx.render(thick,false);
	}
	,splitTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestSplit.draw(this.allShapes.splitShape.clone(),this.draw,this.edgesVertices,this.splitId);
	}
	,transform: function(x,y) {
		return this.ctx.pt(x,y);
	}
	,bananaTest: function() {
		this.ctx = triangulationsWebGLtest_visualTests_TestShape.draw(this.allShapes.banana,this.draw);
		this.draw.titleTextBlue("Banana test - WebGL working",this.ctx);
		this.draw.textViolet("drag points",this.ctx,700,400);
		this.draw.textViolet("<- use arrow keys for next test ->",this.ctx,10,950);
	}
	,__class__: triangulationsWebGLtest_MainTestSetup
};
var triangulationsWebGLtest_fillShapes_AllShapes = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[132.84375,99.5],[115.71875,183.78125],[45.71875,258.0625],[34.28125,372.375],[60.0,496.65625],[148.5625,612.375],[308.5625,653.78125],[432.84375,613.78125],[505.71875,525.21875],[480.0,489.5],[315.71875,459.5],[251.4375,410.9375],[241.4375,312.375],[215.71875,225.21875],[177.15625,189.5],[222.84375,123.78125]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,0]]);
	var face = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
	this1.faces = [[face]];
	this.banana = this1;
	var this2 = new triangulations_FillShape();
	this2.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[217.8169,58.882041],[155.3191,60.502642],[110.5,91.90625],[54.46875,170.28125],[31.481076,274.72886],[35.4397,394.60211],[80.71875,467.6875],[143.40625,501.375],[209.625,498.25],[275.46875,474.75],[341.28125,438.3125],[407.5,422.21875],[484.64128,446.81954],[531.3706,452.99032],[563.84375,441.8125],[523.1787,416.13293],[478.43750000000006,369.34375],[483.92562000000004,320.25704],[539.5625,307.8125],[902.78125,307.8125],[969.0,328.1875],[995.25,348.96875],[1100.6562,336.03125],[1135.3072,349.75],[1176.6875,336.4375],[1199.7812,319.5625],[1203.3125,293.3125],[1137.875,267.0625],[1146.9062,251.78125],[1146.9062,242.0],[1140.625,239.25],[1133.1875,246.3125],[1130.0312,263.9375],[1111.25,256.09375],[1120.6562,241.21875],[1120.6562,231.40625],[1114.375,229.0625],[1107.7188,235.34375],[1104.1875,253.75],[1085.0,246.3125],[1094.7812,231.03125],[1094.0,221.21875],[1087.7188,218.875],[1079.9062000000001,224.34375],[1077.9375000000002,243.5625],[1057.9375000000002,234.9375],[1068.1250000000002,220.0625],[1067.7500000000002,210.65625],[1061.4688000000003,207.5],[1054.4375000000002,213.78125],[1051.6875000000002,232.96875],[1031.6875000000002,224.75],[1041.5000000000002,209.46875],[1041.8750000000002,199.6875],[1035.2188000000003,197.3125],[1027.3750000000002,204.375],[1024.2500000000002,221.625],[1005.4375000000002,213.78125],[1014.8438000000002,199.28125],[1015.2500000000002,189.09375],[1008.1875000000002,186.75],[1001.5312000000002,193.0],[998.3750000000002,211.03125],[956.0625000000002,194.1875],[942.7500000000002,196.9375],[939.2187500000002,243.5625],[605.7812500000002,243.9375],[572.8750000000002,240.8125],[534.4687500000002,204.375],[560.8635600000002,156.81206],[625.9934000000003,124.02377],[696.2812500000003,104.84375],[672.0,88.40625],[616.02112,82.925617],[540.34375,105.25],[473.71875,138.15625],[407.5,154.625],[342.0625,132.28125],[282.12543,89.292248],[218.0625,243.375],[234.125,259.4375],[250.0,243.5625],[275.0625,243.5625],[275.0625,309.78125],[250.78125,309.78125],[250.78125,293.3125],[234.125,309.96875],[217.84375,293.71875],[217.84375,310.15625],[193.1875,310.15625],[193.1875,243.5625],[368.625,243.5625],[368.625,283.75],[358.125,301.9375],[335.03125,309.78125],[312.34375,300.90625],[302.09375,283.125],[302.09375,243.9375],[143.40625,243.9375],[166.125,253.34375],[143.40625,276.875],[166.53125,299.96875],[143.40625,310.15625],[120.6875,299.59375],[110.875,276.46875],[120.6875,253.75]]);
	this2.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,0],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,79],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,91],[98,99],[99,100],[100,101],[101,102],[102,103],[103,104],[104,105],[105,98]]);
	var face0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78];
	var face1 = [79,80,81,82,83,84,85,86,87,88,89,90];
	var face2 = [91,92,93,94,95,96,97];
	var face3 = [98,99,100,101,102,103,104,105];
	this2.faces = [[face0,face1,face2,face3]];
	this.guitar = this2;
	var this3 = new triangulations_FillShape();
	this3.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[120.0,43.78125],[63.9375,55.21875],[53.5625,115.9375],[37.15625,120.5625],[20.71875,137.0],[9.65625,159.15625],[20.71875,181.65625],[36.78125,198.0625],[54.28125,203.0625],[65.0,264.15625],[118.5625,274.875],[174.28125,264.15625],[191.0625,197.71875],[488.9375,197.71875],[498.9375,187.71875],[498.9375,169.875],[515.59375,160.25],[506.9375,145.28125],[493.25,131.59375],[483.03125,141.8125],[476.4375,141.8125],[460.96875,126.375],[449.65625,126.375],[444.5,131.5],[432.84375,131.5],[427.9375,126.59375],[421.4375,126.59375],[411.03125,136.96875],[405.34375,136.96875],[394.84375,126.4375],[388.21875,126.4375],[383.65625,131.0],[373.5625,131.0],[368.53125,125.96875],[361.78125,125.96875],[345.5625,142.21875],[333.5625,142.21875],[328.84375,137.46875],[322.84375,137.46875],[312.0,148.3125],[301.78125,148.3125],[279.71875,126.21875],[268.9375,126.21875],[258.25,115.53125],[191.4375,115.53125],[175.03125,54.3125],[53.5625,137.71875],[70.34375,143.0625],[75.71875,159.15625],[69.65625,175.5625],[53.21875,180.9375],[37.5,175.9375],[31.0625,159.5],[37.5,142.71875]]);
	this3.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,0],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,46]]);
	var face01 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45];
	var face11 = [46,47,48,49,50,51,52,53];
	this3.faces = [[face01,face11]];
	this.keyShape = this3;
	var this4 = new triangulations_FillShape();
	this4.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[78.791898,339.19449],[640.43671,339.19449],[640.43671,352.32647],[640.43671,367.47875999999997],[640.43671,383.64119999999997],[640.43671,400.81379],[640.43671,415.46099999999996],[640.43671,432.12852],[640.43671,446.27065999999996],[640.43671,462.43309999999997],[640.43671,477.08030999999994],[640.43671,491.22243999999995],[640.43671,505.86965999999995],[640.43671,520.0117899999999],[640.43671,534.6589999999999],[640.43671,547.7909899999999],[640.43671,557.8925099999999],[78.79189899999994,557.8925099999999]]);
	this4.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,0]]);
	var face4 = [17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0];
	this4.faces = [[face4]];
	this.sheet = this4;
	var this5 = new triangulations_FillShape();
	this5.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[173.9375,349.15625],[169.78125,349.6875],[169.375,352.75],[171.5625,354.125],[171.5625,373.625],[169.375,375.0],[169.78125,378.0625],[178.96875,378.0625],[179.375,375.0],[177.1875,373.625],[177.1875,363.34375],[180.71875,362.0625],[183.25,362.84375],[183.96875,365.71875],[183.96875,373.625],[181.78125,375.0],[182.1875,378.0625],[191.375,378.0625],[191.78125,375.0],[189.5625,373.625],[189.5625,365.53125],[188.0625,359.6875],[182.5625,357.75],[179.71875,358.1875],[177.1875,359.28125],[177.1875,349.28125],[241.59375,349.15625],[237.4375,349.6875],[237.03125,352.75],[239.21875,354.125],[239.21875,373.625],[237.03125,375.0],[237.4375,378.0625],[246.625,378.0625],[247.03125,375.0],[244.84375,373.625],[244.84375,349.28125],[146.09375,350.53125],[146.09375,356.25],[148.59375,356.5625],[149.59375,354.875],[154.40625,354.875],[154.40625,373.4375],[152.21875,374.75],[152.59375,378.0625],[161.96875,378.0625],[162.375,374.75],[160.15625,373.4375],[160.15625,354.875],[164.96875,354.875],[165.96875,356.5625],[168.5,356.25],[168.5,350.53125],[218.03125,357.59375],[214.09375,358.0625],[213.6875,361.15625],[215.875,362.53125],[215.875,373.625],[213.6875,375.0],[214.09375,378.0625],[223.28125,378.0625],[223.6875,375.0],[221.46875,373.625],[221.46875,363.34375],[225.09375,362.0625],[227.5625,362.84375],[228.28125,365.71875],[228.28125,373.625],[226.09375,375.0],[226.46875,378.0625],[235.6875,378.0625],[236.09375,375.0],[233.875,373.625],[233.875,365.96875],[232.28125,359.59375],[226.8125,357.75],[223.59375,358.3125],[220.96875,359.6875],[220.96875,357.6875],[202.0625,357.75],[194.0625,359.75],[194.0,361.03125],[194.6875,364.625],[198.625,364.625],[199.09375,362.03125],[201.125,361.78125],[204.4375,364.90625],[204.4375,366.84375],[200.09375,366.84375],[194.78125,368.40625],[193.0,372.59375],[194.90625,376.84375],[199.5,378.40625],[205.71875,375.875],[206.40625,378.40625],[212.25,377.4375],[212.25,373.96875],[210.0625,373.28125],[210.0625,364.75],[208.1875,359.40625],[249.03125,358.0625],[248.625,361.15625],[249.59375,362.0],[245.1875,367.71875],[252.28125,378.0625],[258.65625,378.0625],[259.0625,375.0],[255.59375,373.28125],[251.0625,367.3125],[254.90625,362.90625],[258.21875,361.15625],[257.84375,358.0625],[201.65625,369.84375],[204.4375,369.84375],[204.4375,373.125],[201.21875,374.3125],[199.375,373.6875],[198.78125,372.03125],[169.71875,380.875],[169.34375,384.0],[171.90625,385.5],[178.4375,399.0625],[178.4375,403.65625],[176.21875,404.96875],[176.625,408.28125],[186.0,408.28125],[186.375,404.96875],[184.1875,403.65625],[184.1875,399.0625],[190.5,385.53125],[193.15625,384.0],[192.75,380.6875],[183.625,380.6875],[183.21875,384.0],[185.375,385.375],[184.09375,388.28125],[181.90625,394.34375],[181.3125,394.34375],[181.03125,393.53125],[179.03125,388.28125],[177.65625,385.21875],[179.5,384.0],[179.09375,380.6875],[216.84375,387.96875],[212.6875,388.46875],[212.3125,391.5625],[214.5,392.90625],[214.5,402.15625],[215.96875,407.25],[221.1875,408.78125],[227.6875,406.78125],[228.78125,408.78125],[234.8125,407.53125],[234.8125,404.34375],[232.625,403.6875],[232.625,388.0625],[229.375,387.9688],[225.21875,388.4688],[224.8125,391.56255],[227.03125,392.9063],[227.03125,403.12505],[223.375,404.4063],[220.75,403.7188],[220.09375,400.8438],[220.09375,388.06255],[201.5625,388.15625],[194.25,390.875],[191.71875,398.6875],[194.0,406.28125],[201.0,408.78125],[208.3125,406.0],[210.9375,398.0625],[208.59375,390.5625],[201.25,392.25],[205.15625,398.46875],[204.21875,403.28125],[201.3125,404.71875],[197.5,398.3125],[198.40625,393.625]]);
	this5.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray
	var face_h = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
	var face_k0 = [26,27,28,29,30,31,32,33,34,35,36];
	var face_k1 = [100,101,102,103,104,105,106,107,108,109,110,111];
	var face_T = [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52];
	var face_n = [53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78];
	var face_a0 = [79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99];
	var face_a1 = [112,113,114,115,116,117];
	var face_Y = [118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142];
	var face_u = [143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164];
	var face_o0 = [165,166,167,168,169,170,171,172];
	var face_o1 = [173,174,175,176,177,178];
	this5.faces = [[face_h],[face_k0,face_k1],[face_T],[face_n],[face_a0,face_a1],[face_Y],[face_u],[face_o0,face_o1]];
	this.ty = this5;
	var this6 = new triangulations_FillShape();
	this6.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[200.,200.],[100.,300.],[300.,200.],[200.,100.]]);
	this6.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[0,2],[0,3]]);
	var face5 = [];
	this6.faces = [[face5]];
	this.angleCompareShape = this6;
	var this7 = new triangulations_FillShape();
	this7.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this7.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face02 = [0,1,2,3,4,5,6,7,8];
	var face12 = [9,10,11];
	this7.faces = [[face02,face12]];
	this.delaunayShape = this7;
	var this8 = new triangulations_FillShape();
	this8.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[10.,10.],[100.,100.],[100.,10.],[10.,100.]]);
	this8.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[2,3]]);
	var face6 = [];
	this8.faces = [[face6]];
	this.edgeIntersectShape = this8;
	var this9 = new triangulations_FillShape();
	this9.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this9.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face03 = [0,1,2,3,4,5,6,7,8];
	var face13 = [9,10,11];
	this9.faces = [[face03,face13]];
	this.enclosingTriangleShape = this9;
	var this10 = new triangulations_FillShape();
	this10.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[50.,100.],[150.,50.],[150.,150.],[250.,50.],[250.,150.],[350.,100.],[450.,50.],[350.,150.],[350.,250.],[250.,250.],[150.,250.],[150.,350.]]);
	this10.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[0,2],[1,2],[3,4],[3,5],[4,5],[4,7],[4,9],[5,6],[7,8],[8,9],[10,11]]);
	var face7 = [];
	this10.faces = [[face7]];
	this.graphShape = this10;
	var this11 = new triangulations_FillShape();
	this11.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[500.,300.],[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.]]);
	this11.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[]]);
	var face8 = [1,2,3,4,5,6,7,8,9];
	this11.faces = [[face8]];
	this.pointInPolyShape = this11;
	var this12 = new triangulations_FillShape();
	this12.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[200.,200.],[100.,100.],[300.,200.],[200.,300.],[0.,0.]]);
	this12.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[]]);
	var face9 = [3,2,1];
	this12.faces = [[face9]];
	this.pointInTriangleShape = this12;
	var this13 = new triangulations_FillShape();
	this13.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,100.],[200.,100.],[200.,200.],[100.,200.],[50.,150.],[150.,50.],[250.,150.],[150.,250.]]);
	this13.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,0],[0,5],[5,1],[1,6],[6,2],[2,7],[7,3],[3,4],[4,0],[0,2]]);
	var face10 = [];
	this13.faces = [[face10]];
	this.quadEdgeShape = this13;
	var this14 = new triangulations_FillShape();
	this14.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this14.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face04 = [0,1,2,3,4,5,6,7,8];
	var face14 = [9,10,11];
	this14.faces = [[face04,face14]];
	this.splitShape = this14;
	var this15 = new triangulations_FillShape();
	this15.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this15.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face05 = [0,1,2,3,4,5,6,7,8];
	var face15 = [9,10,11];
	this15.faces = [[face05,face15]];
	this.triangulateShape = this15;
	var dataShapes = [this.banana,this.guitar,this.keyShape,this.sheet,this.ty,this.angleCompareShape,this.delaunayShape,this.edgeIntersectShape,this.enclosingTriangleShape,this.graphShape,this.pointInPolyShape,this.pointInTriangleShape,this.quadEdgeShape,this.splitShape,this.triangulateShape];
	var l = dataShapes.length;
	var shape;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		shape = dataShapes[i];
		shape.fit(1024,1024,120);
		if(shape != this.quadEdgeShape) {
			shape.set_fixedExternal(true);
		}
	}
};
triangulationsWebGLtest_fillShapes_AllShapes.__name__ = true;
triangulationsWebGLtest_fillShapes_AllShapes.prototype = {
	__class__: triangulationsWebGLtest_fillShapes_AllShapes
};
var triangulationsWebGLtest_fillShapes__$Banana_Banana_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$Banana_Banana_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$Banana_Banana_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[132.84375,99.5],[115.71875,183.78125],[45.71875,258.0625],[34.28125,372.375],[60.0,496.65625],[148.5625,612.375],[308.5625,653.78125],[432.84375,613.78125],[505.71875,525.21875],[480.0,489.5],[315.71875,459.5],[251.4375,410.9375],[241.4375,312.375],[215.71875,225.21875],[177.15625,189.5],[222.84375,123.78125]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,0]]);
	var face = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$Guitar_Guitar_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$Guitar_Guitar_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$Guitar_Guitar_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[217.8169,58.882041],[155.3191,60.502642],[110.5,91.90625],[54.46875,170.28125],[31.481076,274.72886],[35.4397,394.60211],[80.71875,467.6875],[143.40625,501.375],[209.625,498.25],[275.46875,474.75],[341.28125,438.3125],[407.5,422.21875],[484.64128,446.81954],[531.3706,452.99032],[563.84375,441.8125],[523.1787,416.13293],[478.43750000000006,369.34375],[483.92562000000004,320.25704],[539.5625,307.8125],[902.78125,307.8125],[969.0,328.1875],[995.25,348.96875],[1100.6562,336.03125],[1135.3072,349.75],[1176.6875,336.4375],[1199.7812,319.5625],[1203.3125,293.3125],[1137.875,267.0625],[1146.9062,251.78125],[1146.9062,242.0],[1140.625,239.25],[1133.1875,246.3125],[1130.0312,263.9375],[1111.25,256.09375],[1120.6562,241.21875],[1120.6562,231.40625],[1114.375,229.0625],[1107.7188,235.34375],[1104.1875,253.75],[1085.0,246.3125],[1094.7812,231.03125],[1094.0,221.21875],[1087.7188,218.875],[1079.9062000000001,224.34375],[1077.9375000000002,243.5625],[1057.9375000000002,234.9375],[1068.1250000000002,220.0625],[1067.7500000000002,210.65625],[1061.4688000000003,207.5],[1054.4375000000002,213.78125],[1051.6875000000002,232.96875],[1031.6875000000002,224.75],[1041.5000000000002,209.46875],[1041.8750000000002,199.6875],[1035.2188000000003,197.3125],[1027.3750000000002,204.375],[1024.2500000000002,221.625],[1005.4375000000002,213.78125],[1014.8438000000002,199.28125],[1015.2500000000002,189.09375],[1008.1875000000002,186.75],[1001.5312000000002,193.0],[998.3750000000002,211.03125],[956.0625000000002,194.1875],[942.7500000000002,196.9375],[939.2187500000002,243.5625],[605.7812500000002,243.9375],[572.8750000000002,240.8125],[534.4687500000002,204.375],[560.8635600000002,156.81206],[625.9934000000003,124.02377],[696.2812500000003,104.84375],[672.0,88.40625],[616.02112,82.925617],[540.34375,105.25],[473.71875,138.15625],[407.5,154.625],[342.0625,132.28125],[282.12543,89.292248],[218.0625,243.375],[234.125,259.4375],[250.0,243.5625],[275.0625,243.5625],[275.0625,309.78125],[250.78125,309.78125],[250.78125,293.3125],[234.125,309.96875],[217.84375,293.71875],[217.84375,310.15625],[193.1875,310.15625],[193.1875,243.5625],[368.625,243.5625],[368.625,283.75],[358.125,301.9375],[335.03125,309.78125],[312.34375,300.90625],[302.09375,283.125],[302.09375,243.9375],[143.40625,243.9375],[166.125,253.34375],[143.40625,276.875],[166.53125,299.96875],[143.40625,310.15625],[120.6875,299.59375],[110.875,276.46875],[120.6875,253.75]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,54],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[62,63],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[71,72],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,0],[79,80],[80,81],[81,82],[82,83],[83,84],[84,85],[85,86],[86,87],[87,88],[88,89],[89,90],[90,79],[91,92],[92,93],[93,94],[94,95],[95,96],[96,97],[97,91],[98,99],[99,100],[100,101],[101,102],[102,103],[103,104],[104,105],[105,98]]);
	var face0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78];
	var face1 = [79,80,81,82,83,84,85,86,87,88,89,90];
	var face2 = [91,92,93,94,95,96,97];
	var face3 = [98,99,100,101,102,103,104,105];
	this1.faces = [[face0,face1,face2,face3]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$Key_Key_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$Key_Key_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$Key_Key_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[120.0,43.78125],[63.9375,55.21875],[53.5625,115.9375],[37.15625,120.5625],[20.71875,137.0],[9.65625,159.15625],[20.71875,181.65625],[36.78125,198.0625],[54.28125,203.0625],[65.0,264.15625],[118.5625,274.875],[174.28125,264.15625],[191.0625,197.71875],[488.9375,197.71875],[498.9375,187.71875],[498.9375,169.875],[515.59375,160.25],[506.9375,145.28125],[493.25,131.59375],[483.03125,141.8125],[476.4375,141.8125],[460.96875,126.375],[449.65625,126.375],[444.5,131.5],[432.84375,131.5],[427.9375,126.59375],[421.4375,126.59375],[411.03125,136.96875],[405.34375,136.96875],[394.84375,126.4375],[388.21875,126.4375],[383.65625,131.0],[373.5625,131.0],[368.53125,125.96875],[361.78125,125.96875],[345.5625,142.21875],[333.5625,142.21875],[328.84375,137.46875],[322.84375,137.46875],[312.0,148.3125],[301.78125,148.3125],[279.71875,126.21875],[268.9375,126.21875],[258.25,115.53125],[191.4375,115.53125],[175.03125,54.3125],[53.5625,137.71875],[70.34375,143.0625],[75.71875,159.15625],[69.65625,175.5625],[53.21875,180.9375],[37.5,175.9375],[31.0625,159.5],[37.5,142.71875]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,18],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[26,27],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[35,36],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[44,45],[45,0],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[53,46]]);
	var face0 = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45];
	var face1 = [46,47,48,49,50,51,52,53];
	this1.faces = [[face0,face1]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$Sheet_Sheet_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$Sheet_Sheet_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$Sheet_Sheet_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[78.791898,339.19449],[640.43671,339.19449],[640.43671,352.32647],[640.43671,367.47875999999997],[640.43671,383.64119999999997],[640.43671,400.81379],[640.43671,415.46099999999996],[640.43671,432.12852],[640.43671,446.27065999999996],[640.43671,462.43309999999997],[640.43671,477.08030999999994],[640.43671,491.22243999999995],[640.43671,505.86965999999995],[640.43671,520.0117899999999],[640.43671,534.6589999999999],[640.43671,547.7909899999999],[640.43671,557.8925099999999],[78.79189899999994,557.8925099999999]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[17,0]]);
	var face = [17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestAngleCompareShape_TestAngleCompareShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestAngleCompareShape_TestAngleCompareShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestAngleCompareShape_TestAngleCompareShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[200.,200.],[100.,300.],[300.,200.],[200.,100.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[0,2],[0,3]]);
	var face = [];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestDelaunayShape_TestDelaunayShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestDelaunayShape_TestDelaunayShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestDelaunayShape_TestDelaunayShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face0 = [0,1,2,3,4,5,6,7,8];
	var face1 = [9,10,11];
	this1.faces = [[face0,face1]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestEdgeIntersectShape_TestEdgeIntersectShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestEdgeIntersectShape_TestEdgeIntersectShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestEdgeIntersectShape_TestEdgeIntersectShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[10.,10.],[100.,100.],[100.,10.],[10.,100.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[2,3]]);
	var face = [];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestEnclosingTriangleShape_TestEnclosingTriangleShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestEnclosingTriangleShape_TestEnclosingTriangleShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestEnclosingTriangleShape_TestEnclosingTriangleShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face0 = [0,1,2,3,4,5,6,7,8];
	var face1 = [9,10,11];
	this1.faces = [[face0,face1]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestGraphShape_TestGraphShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestGraphShape_TestGraphShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestGraphShape_TestGraphShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[50.,100.],[150.,50.],[150.,150.],[250.,50.],[250.,150.],[350.,100.],[450.,50.],[350.,150.],[350.,250.],[250.,250.],[150.,250.],[150.,350.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[0,2],[1,2],[3,4],[3,5],[4,5],[4,7],[4,9],[5,6],[7,8],[8,9],[10,11]]);
	var face = [];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestPointInPolyShape_TestPointInPolyShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestPointInPolyShape_TestPointInPolyShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestPointInPolyShape_TestPointInPolyShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[500.,300.],[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[]]);
	var face = [1,2,3,4,5,6,7,8,9];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestPointInTriangleShape_TestPointInTriangleShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestPointInTriangleShape_TestPointInTriangleShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestPointInTriangleShape_TestPointInTriangleShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[200.,200.],[100.,100.],[300.,200.],[200.,300.],[0.,0.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[]]);
	var face = [3,2,1];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestQuadEdgeShape_TestQuadEdgeShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestQuadEdgeShape_TestQuadEdgeShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestQuadEdgeShape_TestQuadEdgeShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,100.],[200.,100.],[200.,200.],[100.,200.],[50.,150.],[150.,50.],[250.,150.],[150.,250.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,0],[0,5],[5,1],[1,6],[6,2],[2,7],[7,3],[3,4],[4,0],[0,2]]);
	var face = [];
	this1.faces = [[face]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestSplitShape_TestSplitShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestSplitShape_TestSplitShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestSplitShape_TestSplitShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face0 = [0,1,2,3,4,5,6,7,8];
	var face1 = [9,10,11];
	this1.faces = [[face0,face1]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$TestTriangulateShape_TestTriangulateShape_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$TestTriangulateShape_TestTriangulateShape_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$TestTriangulateShape_TestTriangulateShape_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[100.,200.],[100.,300.],[300.,400.],[300.,300.],[400.,200.],[300.,200.],[300.,100.],[200.,200.],[200.,100.],[150.,200.],[250.,300.],[150.,300.]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray([[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,0],[9,10],[10,11],[11,9]]);
	var face0 = [0,1,2,3,4,5,6,7,8];
	var face1 = [9,10,11];
	this1.faces = [[face0,face1]];
	return this1;
};
var triangulationsWebGLtest_fillShapes__$Ty_Ty_$Impl_$ = {};
triangulationsWebGLtest_fillShapes__$Ty_Ty_$Impl_$.__name__ = true;
triangulationsWebGLtest_fillShapes__$Ty_Ty_$Impl_$._new = function() {
	var this1 = new triangulations_FillShape();
	this1.vertices = triangulations__$Vertices_Vertices_$Impl_$.fromArrayArray([[173.9375,349.15625],[169.78125,349.6875],[169.375,352.75],[171.5625,354.125],[171.5625,373.625],[169.375,375.0],[169.78125,378.0625],[178.96875,378.0625],[179.375,375.0],[177.1875,373.625],[177.1875,363.34375],[180.71875,362.0625],[183.25,362.84375],[183.96875,365.71875],[183.96875,373.625],[181.78125,375.0],[182.1875,378.0625],[191.375,378.0625],[191.78125,375.0],[189.5625,373.625],[189.5625,365.53125],[188.0625,359.6875],[182.5625,357.75],[179.71875,358.1875],[177.1875,359.28125],[177.1875,349.28125],[241.59375,349.15625],[237.4375,349.6875],[237.03125,352.75],[239.21875,354.125],[239.21875,373.625],[237.03125,375.0],[237.4375,378.0625],[246.625,378.0625],[247.03125,375.0],[244.84375,373.625],[244.84375,349.28125],[146.09375,350.53125],[146.09375,356.25],[148.59375,356.5625],[149.59375,354.875],[154.40625,354.875],[154.40625,373.4375],[152.21875,374.75],[152.59375,378.0625],[161.96875,378.0625],[162.375,374.75],[160.15625,373.4375],[160.15625,354.875],[164.96875,354.875],[165.96875,356.5625],[168.5,356.25],[168.5,350.53125],[218.03125,357.59375],[214.09375,358.0625],[213.6875,361.15625],[215.875,362.53125],[215.875,373.625],[213.6875,375.0],[214.09375,378.0625],[223.28125,378.0625],[223.6875,375.0],[221.46875,373.625],[221.46875,363.34375],[225.09375,362.0625],[227.5625,362.84375],[228.28125,365.71875],[228.28125,373.625],[226.09375,375.0],[226.46875,378.0625],[235.6875,378.0625],[236.09375,375.0],[233.875,373.625],[233.875,365.96875],[232.28125,359.59375],[226.8125,357.75],[223.59375,358.3125],[220.96875,359.6875],[220.96875,357.6875],[202.0625,357.75],[194.0625,359.75],[194.0,361.03125],[194.6875,364.625],[198.625,364.625],[199.09375,362.03125],[201.125,361.78125],[204.4375,364.90625],[204.4375,366.84375],[200.09375,366.84375],[194.78125,368.40625],[193.0,372.59375],[194.90625,376.84375],[199.5,378.40625],[205.71875,375.875],[206.40625,378.40625],[212.25,377.4375],[212.25,373.96875],[210.0625,373.28125],[210.0625,364.75],[208.1875,359.40625],[249.03125,358.0625],[248.625,361.15625],[249.59375,362.0],[245.1875,367.71875],[252.28125,378.0625],[258.65625,378.0625],[259.0625,375.0],[255.59375,373.28125],[251.0625,367.3125],[254.90625,362.90625],[258.21875,361.15625],[257.84375,358.0625],[201.65625,369.84375],[204.4375,369.84375],[204.4375,373.125],[201.21875,374.3125],[199.375,373.6875],[198.78125,372.03125],[169.71875,380.875],[169.34375,384.0],[171.90625,385.5],[178.4375,399.0625],[178.4375,403.65625],[176.21875,404.96875],[176.625,408.28125],[186.0,408.28125],[186.375,404.96875],[184.1875,403.65625],[184.1875,399.0625],[190.5,385.53125],[193.15625,384.0],[192.75,380.6875],[183.625,380.6875],[183.21875,384.0],[185.375,385.375],[184.09375,388.28125],[181.90625,394.34375],[181.3125,394.34375],[181.03125,393.53125],[179.03125,388.28125],[177.65625,385.21875],[179.5,384.0],[179.09375,380.6875],[216.84375,387.96875],[212.6875,388.46875],[212.3125,391.5625],[214.5,392.90625],[214.5,402.15625],[215.96875,407.25],[221.1875,408.78125],[227.6875,406.78125],[228.78125,408.78125],[234.8125,407.53125],[234.8125,404.34375],[232.625,403.6875],[232.625,388.0625],[229.375,387.9688],[225.21875,388.4688],[224.8125,391.56255],[227.03125,392.9063],[227.03125,403.12505],[223.375,404.4063],[220.75,403.7188],[220.09375,400.8438],[220.09375,388.06255],[201.5625,388.15625],[194.25,390.875],[191.71875,398.6875],[194.0,406.28125],[201.0,408.78125],[208.3125,406.0],[210.9375,398.0625],[208.59375,390.5625],[201.25,392.25],[205.15625,398.46875],[204.21875,403.28125],[201.3125,404.71875],[197.5,398.3125],[198.40625,393.625]]);
	this1.edges = triangulations__$Edges_Edges_$Impl_$.fromArrayArray
	var face_h = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25];
	var face_k0 = [26,27,28,29,30,31,32,33,34,35,36];
	var face_k1 = [100,101,102,103,104,105,106,107,108,109,110,111];
	var face_T = [37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52];
	var face_n = [53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78];
	var face_a0 = [79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99];
	var face_a1 = [112,113,114,115,116,117];
	var face_Y = [118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142];
	var face_u = [143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164];
	var face_o0 = [165,166,167,168,169,170,171,172];
	var face_o1 = [173,174,175,176,177,178];
	this1.faces = [[face_h],[face_k0,face_k1],[face_T],[face_n],[face_a0,face_a1],[face_Y],[face_u],[face_o0,face_o1]];
	return this1;
};
var triangulationsWebGLtest_helpers_Draw = function() {
	this.rainbow = [0,16711680,16744192,16776960,65280,255,4915330,9699539,16777215];
	this.sevenSegOnEdges = false;
	this.sevenSegOnPoints = true;
	this.showInstructions = true;
	this.webgl = justTrianglesWebGL_Drawing.create(1024);
	var dom = this.webgl.canvas;
	dom.style.setProperty("pointer-events","none");
	this.sixteenSegBlue = new justTriangles_SixteenSeg(5,5,0.0375,0.0625);
	this.sixteenSegViolet = new justTriangles_SixteenSeg(6,6,0.027,0.0450000000000000053);
	this.sevenSegPoints = new justTriangles_SevenSeg(6,6,0.015,0.025);
	this.sevenSegEdges = new justTriangles_SevenSeg(7,5,0.015,0.025);
};
triangulationsWebGLtest_helpers_Draw.__name__ = true;
triangulationsWebGLtest_helpers_Draw.pointTransform = function(ctx,v) {
	var p = { x : v.x, y : v.y};
	p = ctx.pt(p.x,p.y);
	return p;
};
triangulationsWebGLtest_helpers_Draw.prototype = {
	render: function() {
		justTriangles_Triangle.triangles = [];
		if(this.showInstructions) {
			this.sixteenSegBlue.clear();
		}
		if(this.showInstructions) {
			this.sixteenSegViolet.clear();
		}
		this.sevenSegPoints.clear();
		this.sevenSegEdges.clear();
		if(this.testScene != null) {
			this.testScene();
		}
		this.webgl.clearVerticesAndColors();
		this.sevenSegPoints.render();
		this.sevenSegEdges.render();
		if(this.showInstructions) {
			this.sixteenSegViolet.render();
		}
		if(this.showInstructions) {
			this.sixteenSegBlue.render();
		}
		this.webgl.setTriangles(justTriangles_Triangle.triangles,this.rainbow);
	}
	,titleTextBlue: function(str,ctx) {
		if(!this.showInstructions) {
			return;
		}
		var pos = new khaMath_Vector2(10,10);
		var p = triangulationsWebGLtest_helpers_Draw.pointTransform(ctx,pos);
		this.sixteenSegBlue.add(str,p.x,p.y);
	}
	,textViolet: function(str,ctx,x,y) {
		if(!this.showInstructions) {
			return;
		}
		var pos = new khaMath_Vector2(x,y);
		var p = triangulationsWebGLtest_helpers_Draw.pointTransform(ctx,pos);
		this.sixteenSegViolet.add(str,p.x,p.y);
	}
	,square: function(i,ctx,v) {
		ctx.regularPoly(4,v.x,v.y,10,Math.PI / 4);
		ctx.moveTo(v.x,v.y);
	}
	,squareBetween: function(i,ctx,v0,v1) {
		this.mid = new khaMath_Vector2((v0.x + v1.x) / 2,(v0.y + v1.y) / 2);
		this.squareLarge(i,ctx,this.mid);
	}
	,squareLarge: function(i,ctx,v) {
		ctx.regularPoly(4,v.x,v.y,30,Math.PI / 4);
		ctx.moveTo(v.x,v.y);
	}
	,point: function(i,ctx,v) {
		if(this.sevenSegOnPoints) {
			var p = { x : v.x, y : v.y};
			p = ctx.pt(p.x,p.y);
			var w = this.sevenSegPoints.numberWidth(i);
			this.sevenSegPoints.addNumber(i,p.x - 2 * w,p.y - this.sevenSegPoints.height);
		}
		ctx.regularPoly(20,v.x,v.y,5,0);
		ctx.moveTo(v.x,v.y);
	}
	,faces: function(fillShape,ctx_,showPoints) {
		if(showPoints == null) {
			showPoints = true;
		}
		var faces_ = fillShape.faces;
		var somefaces;
		var face_;
		var _g1 = 0;
		var _g = faces_.length;
		while(_g1 < _g) {
			var j = _g1++;
			somefaces = faces_[j];
			var _g3 = 0;
			var _g2 = somefaces.length;
			while(_g3 < _g2) {
				var k = _g3++;
				face_ = somefaces[k];
				var _g5 = 0;
				var _g4 = face_.length;
				while(_g5 < _g4) {
					var i = _g5++;
					this.face(face_,fillShape,ctx_,showPoints);
				}
			}
		}
	}
	,face: function(face_,fillShape,ctx_,showPoints) {
		if(showPoints == null) {
			showPoints = true;
		}
		var verts = fillShape.vertices;
		var l = face_.length;
		var f0 = face_[0];
		var v0 = verts[f0];
		var f;
		ctx_.moveTo(v0.x,v0.y);
		if(showPoints) {
			this.point(f0,ctx_,v0);
		}
		var v;
		var _g1 = 1;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			f = face_[i];
			v = verts[f];
			ctx_.lineTo(v.x,v.y);
			if(showPoints) {
				this.point(f,ctx_,v);
			}
		}
		ctx_.lineTo(v0.x,v0.y);
	}
	,edges: function(edges,fillShape,ctx,showPoints) {
		if(showPoints == null) {
			showPoints = true;
		}
		var verts = fillShape.vertices;
		var l = edges.length;
		var e;
		var v0;
		var v1;
		var p;
		var q;
		var mid;
		var w;
		var p_;
		var _g1 = 0;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			e = edges[i];
			if(e.isNull()) {
				continue;
			}
			p = e.p;
			q = e.q;
			v0 = verts[p];
			if(v0 == null) {
				continue;
			}
			ctx.moveTo(v0.x,v0.y);
			if(showPoints) {
				this.point(p,ctx,v0);
			}
			v1 = verts[q];
			if(v1 == null) {
				continue;
			}
			ctx.lineTo(v1.x,v1.y);
			if(showPoints) {
				this.point(q,ctx,v1);
			}
			if(this.sevenSegOnEdges) {
				mid = new khaMath_Vector2((v0.x + v1.x) / 2,(v0.y + v1.y) / 2);
				p_ = { x : mid.x, y : mid.y};
				p_ = ctx.pt(p_.x,p_.y);
				w = this.sevenSegEdges.numberWidth(i);
				this.sevenSegEdges.addNumber(i,p_.x,p_.y,true);
			}
		}
	}
	,verticesPoints: function(fillShape,ctx,specialPoint,specialColor,normalColor) {
		if(specialPoint == null) {
			specialPoint = -1;
		}
		var verts = fillShape.vertices;
		var v;
		var v0 = verts[0];
		if(specialPoint == 0) {
			ctx.setColor(specialColor,specialColor);
			this.point(0,ctx,v0);
		} else {
			ctx.setColor(normalColor,normalColor);
			this.point(0,ctx,v0);
		}
		var l = verts.length;
		var _g1 = 1;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			v = verts[i];
			if(specialPoint == i) {
				ctx.setColor(specialColor,specialColor);
				this.point(i,ctx,v);
			} else {
				ctx.setColor(normalColor,normalColor);
				this.point(i,ctx,v);
			}
		}
	}
	,vertices: function(fillShape,ctx,showPoints) {
		if(showPoints == null) {
			showPoints = true;
		}
		var verts = fillShape.vertices;
		var v0 = verts[0];
		var v;
		ctx.moveTo(v0.x,v0.y);
		if(showPoints) {
			this.point(0,ctx,v0);
		}
		var l = verts.length;
		var _g1 = 1;
		var _g = l;
		while(_g1 < _g) {
			var i = _g1++;
			v = verts[i];
			ctx.lineTo(v.x,v.y);
			if(showPoints) {
				this.point(i,ctx,v);
			}
		}
		ctx.lineTo(v0.x,v0.y);
	}
	,__class__: triangulationsWebGLtest_helpers_Draw
};
var triangulationsWebGLtest_helpers_Nav = function(startScene,sceneMax_,mouseScenes_) {
	this.theta = 0;
	this.sceneMax = 10;
	this.scene = 0;
	this.scene = startScene;
	this.sceneMax = sceneMax_;
	this.mouseScenes = mouseScenes_;
	js_Browser.get_document().onkeydown = $bind(this,this.keyDownHandler);
};
triangulationsWebGLtest_helpers_Nav.__name__ = true;
triangulationsWebGLtest_helpers_Nav.prototype = {
	start: function() {
		this.onSceneChange(this.scene);
	}
	,spinForwards: function() {
		if(this.theta > Math.PI / 2) {
			this.setTransform(null);
			this.theta = 0;
			if(this.scene++ == this.sceneMax) {
				this.scene = 0;
			}
			js_Browser.get_document().onkeydown = $bind(this,this.keyDownHandler);
			if(this.onSceneChange != null) {
				this.onSceneChange(this.scene);
			}
			this.trackMouse();
		}
		var alpha = this;
		var alpha1 = alpha.theta += Math.PI / 75;
		var ca = Math.cos(alpha1);
		var sa = Math.sin(alpha1);
		var _this = new khaMath_Matrix4(1,0,0,0,0,ca,-sa,0,0,sa,ca,0,0,0,0,1);
		var alpha2 = this.theta;
		var ca1 = Math.cos(alpha2);
		var sa1 = Math.sin(alpha2);
		var m = new khaMath_Matrix4(ca1,0,sa1,0,0,1,0,0,-sa1,0,ca1,0,0,0,0,1);
		return new khaMath_Matrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,spinBackwards: function() {
		if(this.theta > Math.PI / 2) {
			this.setTransform(null);
			this.theta = 0;
			if(this.scene-- == 0) {
				this.scene = this.sceneMax;
			}
			js_Browser.get_document().onkeydown = $bind(this,this.keyDownHandler);
			if(this.onSceneChange != null) {
				this.onSceneChange(this.scene);
			}
			this.trackMouse();
		}
		var alpha = this;
		var alpha1 = alpha.theta += Math.PI / 75;
		var ca = Math.cos(alpha1);
		var sa = Math.sin(alpha1);
		var _this = new khaMath_Matrix4(ca,0,sa,0,0,1,0,0,-sa,0,ca,0,0,0,0,1);
		var alpha2 = this.theta;
		var ca1 = Math.cos(alpha2);
		var sa1 = Math.sin(alpha2);
		var m = new khaMath_Matrix4(1,0,0,0,0,ca1,-sa1,0,0,sa1,ca1,0,0,0,0,1);
		return new khaMath_Matrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,trackMouse: function() {
		var _gthis = this;
		var storeMouse = false;
		var _g = 0;
		var _g1 = this.mouseScenes;
		while(_g < _g1.length) {
			var sceneInt = _g1[_g];
			++_g;
			if(sceneInt == this.scene) {
				storeMouse = true;
				break;
			}
		}
		if(storeMouse) {
			js_Browser.get_document().onmousemove = function(e) {
				_gthis.mX = e.clientX * 2;
				_gthis.mY = e.clientY * 2;
				if(_gthis.updateFunction != null) {
					_gthis.updateFunction();
				}
			};
			if(this.mouseMoveUpdate != null) {
				this.updateFunction = this.mouseMoveUpdate;
			}
		} else {
			this.updateFunction = null;
			js_Browser.get_document().onmousemove = null;
		}
	}
	,keyDownHandler: function(e) {
		e.preventDefault();
		if(e.keyCode == 37) {
			console.log("LEFT");
			this.setTransform($bind(this,this.spinBackwards));
		} else if(e.keyCode == 39) {
			console.log("RIGHT");
			this.setTransform($bind(this,this.spinForwards));
		}
		console.log(e.keyCode);
	}
	,__class__: triangulationsWebGLtest_helpers_Nav
};
var triangulationsWebGLtest_visualTests_TestAngleCompare = function() { };
triangulationsWebGLtest_visualTests_TestAngleCompare.__name__ = true;
triangulationsWebGLtest_visualTests_TestAngleCompare.draw = function(shape,draw) {
	var vert = shape.vertices;
	var v0 = vert[0];
	var v1 = vert[1];
	var v2 = vert[2];
	var v3 = vert[3];
	var cmp = triangulations_Geom2.angleCompare(v0,v1);
	var r = cmp(v2,v3);
	var thick = 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Angle Compare test",ctx);
	draw.textViolet("drag points around",ctx,50,950);
	draw.textViolet("not really sure what this does!",ctx,50,1020);
	ctx.setThickness(4);
	ctx.setColor(0,3);
	ctx.fill = true;
	draw.edges(shape.edges,shape,ctx,true);
	draw.verticesPoints(shape,ctx,0,0,5);
	var c2 = r < 0 ? 1 : 0;
	var c3 = r > 0 ? 1 : 0;
	ctx.setColor(c2,c2);
	draw.square(0,ctx,v2);
	ctx.setColor(c3,c3);
	draw.square(0,ctx,v3);
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestDelaunay = function() { };
triangulationsWebGLtest_visualTests_TestDelaunay.__name__ = true;
triangulationsWebGLtest_visualTests_TestDelaunay.draw = function(shape,draw) {
	var vert = shape.vertices;
	var face = shape.faces;
	var edges = shape.edges;
	var diags = triangulations_Triangulate.triangulateFace(vert,face[0]);
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this1 = v;
	var e = this1;
	var l = edges.length;
	var tempIn;
	var tempOut;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		e[i] = edges[i].clone();
	}
	var this2 = e;
	var l1 = this2.length;
	var el = diags.length;
	var _g11 = 0;
	var _g2 = el;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this2[l1 + i1] = diags[i1];
	}
	var all = this2;
	var v1 = null;
	var this3;
	if(v1 == null) {
		v1 = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this3 = v1;
	var coEdges = this3;
	var sideEdges = [];
	triangulations_Triangulate.makeQuadEdge(vert,all,coEdges,sideEdges);
	var delaunay = new triangulations_Delaunay();
	delaunay.refineToDelaunay(vert,all,coEdges,sideEdges);
	var centres = [];
	var radius = [];
	var count = 0;
	var _g12 = edges.length;
	var _g3 = all.length;
	while(_g12 < _g3) {
		var j = _g12++;
		var edge = all[j];
		var coEdge = coEdges[j];
		var w = vert[edge.p];
		var y = vert[edge.q];
		var x = vert[coEdge.p];
		var z = vert[coEdge.q];
		var p = triangulations_Geom2.circumcenter(w,y,x);
		var dx = w.x - p.x;
		var dy = w.y - p.y;
		var r = Math.sqrt(dx * dx + dy * dy);
		centres[count] = p;
		radius[count] = r;
		++count;
	}
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Delaunay test",ctx);
	draw.textViolet("notice triangle 7,5,10",ctx,850,200);
	var thick = 4;
	ctx.setThickness(4);
	ctx.setColor(4,0);
	ctx.fill = false;
	var l2 = centres.length;
	var c;
	var _g13 = 0;
	var _g4 = l2;
	while(_g13 < _g4) {
		var i2 = _g13++;
		c = centres[i2];
		ctx.regularPoly(60,c.x,c.y,radius[i2],0);
	}
	ctx.setColor(0,3);
	ctx.moveTo(0,0);
	draw.edges(all,shape,ctx,true);
	ctx.setColor(1,3);
	ctx.moveTo(0,0);
	draw.edges(edges,shape,ctx,true);
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestEdgeIntersect = function() { };
triangulationsWebGLtest_visualTests_TestEdgeIntersect.__name__ = true;
triangulationsWebGLtest_visualTests_TestEdgeIntersect.draw = function(shape,draw) {
	var vert = shape.vertices;
	var v0 = vert[0];
	var v1 = vert[1];
	var v2 = vert[2];
	var v3 = vert[3];
	var c = triangulations_Geom2.edgesIntersect(v0,v1,v2,v3) == true ? 1 : 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Edge Intersect test",ctx);
	draw.textViolet("Drag lines so they don't cross",ctx,50,350);
	var thick = 4;
	ctx.setThickness(4);
	ctx.fill = false;
	ctx.setColor(c);
	draw.edges(shape.edges,shape,ctx,true);
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestPointInPoly = function() { };
triangulationsWebGLtest_visualTests_TestPointInPoly.__name__ = true;
triangulationsWebGLtest_visualTests_TestPointInPoly.draw = function(shape,draw) {
	var verts = shape.vertices;
	var c = triangulations__$Vertices_Vertices_$Impl_$.pointInPolygon(verts,shape.faces[0][0],verts[0]) ? 4 : 1;
	var thick = 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Point in Polygon test",ctx);
	draw.textViolet("move '0' point inside shape",ctx,50,900);
	ctx.setThickness(4);
	ctx.setColor(0,3);
	ctx.fill = true;
	ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
	draw.faces(shape,ctx,false);
	ctx.fill = true;
	ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
	ctx.setColor(c,c);
	draw.square(0,ctx,verts[0]);
	draw.verticesPoints(shape,ctx,0,c,5);
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestPointInTriangle = function() { };
triangulationsWebGLtest_visualTests_TestPointInTriangle.__name__ = true;
triangulationsWebGLtest_visualTests_TestPointInTriangle.draw = function(shape,draw) {
	var vert = shape.vertices;
	var v0 = vert[0];
	var v1 = vert[1];
	var v2 = vert[2];
	var v3 = vert[3];
	var v4 = vert[4];
	var inTriangle = triangulations_Geom2.pointInTriangle(v1,v2,v3);
	vert[4] = triangulations_Geom2.circumcenter(v1,v2,v3);
	v4 = vert[4];
	var c0 = inTriangle(v0) ? 1 : 4;
	var dx = v4.x - v1.x;
	var dy = v4.y - v1.y;
	var radius = Math.sqrt(dx * dx + dy * dy);
	var thick = 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Point in triangle test",ctx);
	draw.textViolet("move point in and out of triangle",ctx,10,150);
	draw.textViolet("also possible to drag triangle corners",ctx,10,1000);
	ctx.setThickness(4);
	ctx.setColor(0,3);
	ctx.fill = false;
	ctx.regularPoly(60,v4.x,v4.y,radius,0);
	ctx.moveTo(v4.x,v4.y);
	ctx.setColor(1,2);
	ctx.fill = true;
	draw.faces(shape,ctx,false);
	ctx.setColor(0,3);
	ctx.fill = true;
	draw.verticesPoints(shape,ctx,0,0,5);
	ctx.setColor(c0,c0);
	draw.square(0,ctx,v0);
	console.log("d " + (triangulations_Geom2.pointToEdgeDistSq(v1,v2))(v0));
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestQuadEdge = function() { };
triangulationsWebGLtest_visualTests_TestQuadEdge.__name__ = true;
triangulationsWebGLtest_visualTests_TestQuadEdge.draw = function(shape,draw,toggle) {
	var vert = shape.vertices;
	var face = shape.faces;
	var edges = shape.edges;
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this1 = v;
	var coEdges = this1;
	var sideEdges = [];
	triangulations_Triangulate.makeQuadEdge(vert,edges,coEdges,sideEdges);
	draw.sevenSegOnEdges = true;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Quad Edge test",ctx);
	draw.textViolet("click on yellow square to flip",ctx,10,1000);
	var thick = 4;
	ctx.setThickness(4);
	ctx.fill = true;
	ctx.setColor(2,3);
	ctx.moveTo(0,0);
	if(!toggle) {
		draw.edges(edges,shape,ctx,true);
	}
	ctx.fill = true;
	ctx.setColor(7,2);
	ctx.moveTo(0,0);
	if(toggle) {
		var edge = edges[12].clone();
		var coEdge = coEdges[12];
		var se = sideEdges[12];
		var j0 = se.a;
		var j1 = se.b;
		var j2 = se.c;
		var j3 = se.d;
		coEdges[j0].substitute(edge.p,coEdge.q);
		se = sideEdges[j0];
		se.substitute(12,j1);
		se.substitute(j3,12);
		coEdges[j1].substitute(edge.p,coEdge.p);
		se = sideEdges[j1];
		se.substitute(12,j0);
		se.substitute(j2,12);
		coEdges[j2].substitute(edge.q,coEdge.p);
		se = sideEdges[j2];
		se.substitute(12,j3);
		se.substitute(j1,12);
		coEdges[j3].substitute(edge.q,coEdge.q);
		se = sideEdges[j3];
		se.substitute(12,j2);
		se.substitute(j0,12);
		edges[12] = coEdges[12];
		coEdges[12] = edge;
		var tmp = sideEdges[12].a;
		sideEdges[12].a = sideEdges[12].c;
		sideEdges[12].c = tmp;
		draw.edges(edges,shape,ctx,true);
	}
	ctx.setColor(3,3);
	ctx.moveTo(0,0);
	var e = edges[12];
	draw.squareBetween(2,ctx,vert[e.p],vert[e.q]);
	ctx.render(thick,false);
	draw.sevenSegOnEdges = false;
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestShape = function() { };
triangulationsWebGLtest_visualTests_TestShape.__name__ = true;
triangulationsWebGLtest_visualTests_TestShape.draw = function(shape,draw) {
	var thick = 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	ctx.setThickness(4);
	ctx.setColor(0,3);
	ctx.fill = true;
	ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
	draw.vertices(shape,ctx,false);
	ctx.setColor(0);
	ctx.fill = true;
	ctx.lineType = justTriangles_LineType.TriangleJoinCurve;
	draw.verticesPoints(shape,ctx,-1,1,5);
	ctx.render(thick,false);
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestSplit = function() { };
triangulationsWebGLtest_visualTests_TestSplit.__name__ = true;
triangulationsWebGLtest_visualTests_TestSplit.draw = function(shape,draw,edgesVertices,splitId) {
	var shape1 = shape.clone();
	var vert = shape1.vertices;
	var face = shape1.faces;
	var edges = shape1.edges;
	var diags = triangulations_Triangulate.triangulateFace(vert,face[0]);
	var v = null;
	var this1;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this1 = v;
	var e = this1;
	var l = edges.length;
	var tempIn;
	var tempOut;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		e[i] = edges[i].clone();
	}
	var this2 = e;
	var l1 = this2.length;
	var el = diags.length;
	var _g11 = 0;
	var _g2 = el;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this2[l1 + i1] = diags[i1];
	}
	var all = this2;
	var v1 = null;
	var this3;
	if(v1 == null) {
		v1 = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this3 = v1;
	var coEdges = this3;
	var sideEdges = [];
	triangulations_Triangulate.makeQuadEdge(vert,all,coEdges,sideEdges);
	var delaunay = new triangulations_Delaunay();
	delaunay.refineToDelaunay(vert,all,coEdges,sideEdges);
	var v2 = null;
	var this4;
	if(v2 == null) {
		v2 = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this4 = v2;
	var e1 = this4;
	var l2 = all.length;
	var tempIn1;
	var tempOut1;
	var _g12 = 0;
	var _g3 = l2;
	while(_g12 < _g3) {
		var i2 = _g12++;
		e1[i2] = all[i2].clone();
	}
	var extra = e1;
	if(splitId != null) {
		triangulations_Triangulate.splitEdge(vert,extra,coEdges,sideEdges,splitId);
	}
	edgesVertices.edges = extra;
	edgesVertices.vertices = vert;
	draw.sevenSegOnEdges = true;
	draw.sevenSegOnPoints = false;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Split test",ctx);
	draw.textViolet("click on edge number to split",ctx,10,1000);
	var thick = 4;
	ctx.setThickness(4);
	ctx.setColor(4,0);
	ctx.moveTo(0,0);
	ctx.fill = false;
	ctx.setColor(0,3);
	ctx.moveTo(0,0);
	draw.edges(all,shape1,ctx,true);
	draw.edges(extra,shape1,ctx,true);
	ctx.setColor(1,3);
	ctx.moveTo(0,0);
	draw.edges(edges,shape1,ctx,true);
	ctx.render(thick,false);
	draw.sevenSegOnEdges = false;
	draw.sevenSegOnPoints = true;
	return ctx;
};
var triangulationsWebGLtest_visualTests_TestTriangulate = function() { };
triangulationsWebGLtest_visualTests_TestTriangulate.__name__ = true;
triangulationsWebGLtest_visualTests_TestTriangulate.draw = function(shape,draw) {
	var vert = shape.vertices;
	var face = shape.faces;
	var diags = triangulations_Triangulate.triangulateFace(vert,face[0]);
	var this1 = shape.edges;
	var v = null;
	var this2;
	if(v == null) {
		v = triangulations__$Edges_Edges_$Impl_$._new([]);
	}
	this2 = v;
	var e = this2;
	var l = this1.length;
	var tempIn;
	var tempOut;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var i = _g1++;
		e[i] = this1[i].clone();
	}
	var this3 = e;
	var l1 = this3.length;
	var el = diags.length;
	var _g11 = 0;
	var _g2 = el;
	while(_g11 < _g2) {
		var i1 = _g11++;
		this3[l1 + i1] = diags[i1];
	}
	var extra = this3;
	var thick = 4;
	var ctx = new justTriangles_PathContext(1,1024,0,0);
	draw.titleTextBlue("Triangulate test",ctx);
	draw.textViolet("move points gently to re-triangulate",ctx,10,1000);
	ctx.setThickness(4);
	ctx.fill = true;
	ctx.setColor(0,3);
	draw.faces(shape,ctx,false);
	ctx.fill = false;
	ctx.setColor(4,3);
	ctx.moveTo(0,0);
	draw.edges(extra,shape,ctx,true);
	ctx.setColor(0,3);
	draw.faces(shape,ctx,false);
	ctx.render(thick,false);
	return ctx;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
justTriangles_Draw.circleSides = 60;
justTriangles_PathContext.circleSides = 60;
justTriangles_PolyK.small = 0.0000000001;
justTriangles_ShapePoints.quadStep = 0.03;
justTriangles_ShapePoints.cubicStep = 0.03;
justTriangles_Triangle.triangles = [];
justTrianglesWebGL_Shader.vertex = "attribute vec3 pos;" + "attribute vec4 color;" + "varying vec4 vcol;" + "uniform mat4 modelViewProjection;" + "void main(void) {" + " gl_Position = modelViewProjection * vec4(pos, 1.0);" + " vcol = color;" + "}";
justTrianglesWebGL_Shader.fragment = "precision mediump float;" + "varying vec4 vcol;" + "void main(void) {" + " gl_FragColor = vcol;" + "}";
khaMath_Matrix4.width = 4;
khaMath_Matrix4.height = 4;
triangulationsWebGLtest_MainTestSetup.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
